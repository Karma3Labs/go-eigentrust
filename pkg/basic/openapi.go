// Package basic provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package basic

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Defines values for InlineTrustMatrixScheme.
const (
	InlineTrustMatrixSchemeInline InlineTrustMatrixScheme = "inline"
)

// Defines values for InlineTrustVectorScheme.
const (
	InlineTrustVectorSchemeInline InlineTrustVectorScheme = "inline"
)

// Defines values for ObjectStorageTrustMatrixScheme.
const (
	ObjectStorageTrustMatrixSchemeObjectstorage ObjectStorageTrustMatrixScheme = "objectstorage"
)

// Defines values for ObjectStorageTrustVectorScheme.
const (
	ObjectStorageTrustVectorSchemeObjectstorage ObjectStorageTrustVectorScheme = "objectstorage"
)

// Defines values for StoredTrustMatrixScheme.
const (
	StoredTrustMatrixSchemeStored StoredTrustMatrixScheme = "stored"
)

// Defines values for TrustMatrixRefScheme.
const (
	TrustMatrixRefSchemeInline        TrustMatrixRefScheme = "inline"
	TrustMatrixRefSchemeObjectstorage TrustMatrixRefScheme = "objectstorage"
	TrustMatrixRefSchemeStored        TrustMatrixRefScheme = "stored"
)

// Defines values for TrustVectorRefScheme.
const (
	Inline        TrustVectorRefScheme = "inline"
	Objectstorage TrustVectorRefScheme = "objectstorage"
	Stored        TrustVectorRefScheme = "stored"
)

// ComputeRequestBody defines model for ComputeRequestBody.
type ComputeRequestBody struct {
	Alpha *float64 `json:"alpha,omitempty"`

	// CheckFreq If given (n), exit criteria are checked every n iterations.
	// It can be used in conjunction with minIterations
	// for "modulo n" behavior,
	// e.g. with minIterations=7 and checkFreq=5
	// exit criteria are checked after 7/12/17/... iterations.
	// Default is 1: exit criteria are checked after every iteration.
	CheckFreq *int `json:"checkFreq,omitempty"`

	// EffectiveInitialTrust Refers to a trust vector.
	EffectiveInitialTrust *TrustVectorRef `json:"effectiveInitialTrust,omitempty"`

	// EffectiveLocalTrust Refers to a trust matrix, such as local trust.
	EffectiveLocalTrust *TrustMatrixRef `json:"effectiveLocalTrust,omitempty"`

	// EffectivePreTrust Refers to a trust vector.
	EffectivePreTrust *TrustVectorRef `json:"effectivePreTrust,omitempty"`
	Epsilon           *float64        `json:"epsilon,omitempty"`

	// FlatTail The length of the flat tail
	// (ranking unchanged from previous iteration)
	// that must be seen before terminating the recursion.
	// 0 means a flat tail need not be seen,
	// and the recursion is terminated solely based upon epsilon.
	FlatTail *int `json:"flatTail,omitempty"`

	// GlobalTrust Refers to a trust matrix, such as local trust.
	GlobalTrust *TrustMatrixRef `json:"globalTrust,omitempty"`

	// InitialTrust Refers to a trust vector.
	InitialTrust *TrustVectorRef `json:"initialTrust,omitempty"`

	// LocalTrust Refers to a trust matrix, such as local trust.
	LocalTrust TrustMatrixRef `json:"localTrust"`

	// MaxIterations The maximum number of iterations after which to stop
	// even if other termination criteria are not met.
	// 0 means no limit.
	MaxIterations *int `json:"maxIterations,omitempty"`

	// MinIterations The minimum number of iterations to perform
	// even if other termination criteria are met.
	// Defaults to checkFreq, which in turn defaults to 1.
	MinIterations *int `json:"minIterations,omitempty"`

	// NumLeaders The number of top-ranking peers to consider
	// for the purpose of flat-tail algorithm.  0 means everyone.
	NumLeaders *int `json:"numLeaders,omitempty"`

	// PreTrust Refers to a trust vector.
	PreTrust *TrustVectorRef `json:"preTrust,omitempty"`
}

// ComputeWithStatsResponseOK defines model for ComputeWithStatsResponseOK.
type ComputeWithStatsResponseOK struct {
	// EigenTrust Refers to a trust vector.
	EigenTrust TrustVectorRef `json:"eigenTrust"`

	// FlatTailStats Flat-tail algorithm stats and peer ranking.
	FlatTailStats FlatTailStats `json:"flatTailStats"`
}

// FlatTailStats Flat-tail algorithm stats and peer ranking.
type FlatTailStats struct {
	// DeltaNorm The d value as of the head of the last flat-tail.
	// This can be used to fine-tune epsilon
	// even when not using flat-tail algorithm.
	DeltaNorm float64 `json:"deltaNorm"`

	// Length The flat-tail length (say, L, then
	// the last L+1 iterations had the same ranking).
	// This is the number of iterations that could be saved
	// by using flat-tail algorithm
	// (passing flatTail equal to the threshold stat below)
	// while achieving the same result.
	Length int `json:"length"`

	// Ranking The sorted ranking of peer indices.
	// Peers not found here have zero global trust.
	Ranking []int `json:"ranking"`

	// Threshold The suggested minimum threshold parameter (flatTail).
	// It is determined from false flat tails observed.
	// Example: If a ranking pattern ABCDDEEEEFFFFFFFFFF was observed
	// (each letter is a distinct ranking) before epsilon was reached,
	// both DD and EEEE are false flat tails
	// of length 1 and 3 respectively.
	// In this case, Threshold=4 is suggested in order to ignore
	// these false flat tails.
	Threshold int `json:"threshold"`
}

// InlineTrustMatrix Refers to a trust matrix "inline".
//
// Instead of pointing (referencing) to an externally stored trust matrix,
// it carries the contents of the trust matrix
// within the reference object itself.
type InlineTrustMatrix struct {
	// Entries Contains the non-zero entries in the trust matrix.
	//
	// Truster/trustee pairs missing here are assigned zero direct trust,
	// i.e. no trust relationship.
	Entries []InlineTrustMatrixEntry `json:"entries"`

	// Scheme A fixed string `"inline"`.
	Scheme InlineTrustMatrixScheme `json:"scheme"`

	// Size Denotes the number of peers in the trust matrix,
	// i.e. its square dimension.
	Size int `json:"size"`
}

// InlineTrustMatrixScheme A fixed string `"inline"`.
type InlineTrustMatrixScheme string

// InlineTrustMatrixEntry Represents an entry in the trust matrix.
//
// Denotes that one peer (`i`) places a direct trust in another peer (`j`)
// by a specific amount (`v`).
type InlineTrustMatrixEntry struct {
	// I Denotes the trusting peer.
	//
	// It is a zero-based index,
	// and must be less than the size (dimension)
	// of the enclosing trust matrix.
	I int `json:"i"`

	// J Denotes the trusted peer.
	//
	// It is a zero-based index,
	// and must be less than the size (dimension)
	// of the enclosing trust matrix.
	J int `json:"j"`

	// V Represents the (positive) amount of trust
	// placed by peer `i` in peer `j`.
	V float64 `json:"v"`
}

// InlineTrustVector Refers to a trust vector "inline".
//
// Instead of pointing (referencing) to an externally stored trust vector,
// it carries the contents of the trust vector
// within the reference object itself.
type InlineTrustVector struct {
	// Entries Contains the non-zero entries in the trust vector.
	//
	// Peers missing here are assigned zero amount of trust.
	Entries []InlineTrustVectorEntry `json:"entries"`

	// Scheme A fixed string `"inline"` to denote an inline reference.
	Scheme InlineTrustVectorScheme `json:"scheme"`

	// Size Denotes the number of peers in the trust vector, i.e. its length.
	Size int `json:"size"`
}

// InlineTrustVectorScheme A fixed string `"inline"` to denote an inline reference.
type InlineTrustVectorScheme string

// InlineTrustVectorEntry Represents an entry in the trust vector.
//
// Denotes that a trust is placed in a peer (`i`)
// by a specific amount (`v`).
type InlineTrustVectorEntry struct {
	// I Denotes the peer.
	//
	// It is a zero-based index,
	// and must be less than the length of the enclosing trust vector.
	I int `json:"i"`

	// V Represents the (positive) amount of trust placed in peer `i`.
	V float64 `json:"v"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Message Describes the error in a human-readable message.
	//
	// It may be empty.
	Message string `json:"message"`
}

// ObjectStorageTrustMatrix Refers to a trust matrix in a remote object storage service.
type ObjectStorageTrustMatrix struct {
	// Scheme A fixed string `"objectstorage"`.
	Scheme ObjectStorageTrustMatrixScheme `json:"scheme"`

	// Url URL of the trust matrix file.
	//
	// It must refer to a CSV file, with three columns `i`, `j`, and `v`.
	// Currently the `s3://` URL scheme (AWS S3) is supported.
	Url string `json:"url"`
}

// ObjectStorageTrustMatrixScheme A fixed string `"objectstorage"`.
type ObjectStorageTrustMatrixScheme string

// ObjectStorageTrustVector Refers to a trust vector in a remote object storage service.
type ObjectStorageTrustVector struct {
	// Scheme A fixed string `"objectstorage"`.
	Scheme ObjectStorageTrustVectorScheme `json:"scheme"`

	// Url URL of the trust vector file.
	//
	// It must refer to a CSV file, with two columns `i` and `v`.
	// Currently the `s3://` URL scheme (AWS S3) is supported.
	Url string `json:"url"`
}

// ObjectStorageTrustVectorScheme A fixed string `"objectstorage"`.
type ObjectStorageTrustVectorScheme string

// ServerStatus defines model for ServerStatus.
type ServerStatus struct {
	// Message The server status message.
	Message string `json:"message"`
}

// StoredTrustMatrix Refers to a trust matrix stored on the server.
//
// Stored trust matrix is identified with its ID string.
type StoredTrustMatrix struct {
	// Id Denotes a trust collection (matrix/vector).
	Id TrustCollectionId `json:"id"`

	// Scheme A fixed string `"stored"`.
	Scheme StoredTrustMatrixScheme `json:"scheme"`
}

// StoredTrustMatrixScheme A fixed string `"stored"`.
type StoredTrustMatrixScheme string

// TrustCollectionId Denotes a trust collection (matrix/vector).
type TrustCollectionId = string

// TrustMatrixRef defines model for TrustMatrixRef.
type TrustMatrixRef struct {
	// Scheme Trust reference scheme, akin to URI scheme.
	Scheme TrustMatrixRefScheme `json:"scheme"`
	union  json.RawMessage
}

// TrustMatrixRefScheme Trust reference scheme, akin to URI scheme.
type TrustMatrixRefScheme string

// TrustVectorRef defines model for TrustVectorRef.
type TrustVectorRef struct {
	// Scheme Trust vector reference scheme, akin to URI scheme.
	Scheme TrustVectorRefScheme `json:"scheme"`
	union  json.RawMessage
}

// TrustVectorRefScheme Trust vector reference scheme, akin to URI scheme.
type TrustVectorRefScheme string

// LocalTrustIdParam Denotes a trust collection (matrix/vector).
type LocalTrustIdParam = TrustCollectionId

// ServerNotReady defines model for ServerNotReady.
type ServerNotReady = ServerStatus

// ServerReady defines model for ServerReady.
type ServerReady = ServerStatus

// UpdateLocalTrustParams defines parameters for UpdateLocalTrust.
type UpdateLocalTrustParams struct {
	// Merge Controls behavior if a local trust exists under the same ID.
	//
	// If false (default), the local trust ref contents replaces
	// the existing one under the same ID, if any.
	// If true, the local trust ref contents are merged
	// into the existing one under the same ID.
	Merge *bool `form:"merge,omitempty" json:"merge,omitempty"`
}

// ComputeJSONRequestBody defines body for Compute for application/json ContentType.
type ComputeJSONRequestBody = ComputeRequestBody

// ComputeWithStatsJSONRequestBody defines body for ComputeWithStats for application/json ContentType.
type ComputeWithStatsJSONRequestBody = ComputeRequestBody

// UpdateLocalTrustJSONRequestBody defines body for UpdateLocalTrust for application/json ContentType.
type UpdateLocalTrustJSONRequestBody = TrustMatrixRef

// AsInlineTrustMatrix returns the union data inside the TrustMatrixRef as a InlineTrustMatrix
func (t TrustMatrixRef) AsInlineTrustMatrix() (InlineTrustMatrix, error) {
	var body InlineTrustMatrix
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineTrustMatrix overwrites any union data inside the TrustMatrixRef as the provided InlineTrustMatrix
func (t *TrustMatrixRef) FromInlineTrustMatrix(v InlineTrustMatrix) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineTrustMatrix performs a merge with any union data inside the TrustMatrixRef, using the provided InlineTrustMatrix
func (t *TrustMatrixRef) MergeInlineTrustMatrix(v InlineTrustMatrix) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoredTrustMatrix returns the union data inside the TrustMatrixRef as a StoredTrustMatrix
func (t TrustMatrixRef) AsStoredTrustMatrix() (StoredTrustMatrix, error) {
	var body StoredTrustMatrix
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoredTrustMatrix overwrites any union data inside the TrustMatrixRef as the provided StoredTrustMatrix
func (t *TrustMatrixRef) FromStoredTrustMatrix(v StoredTrustMatrix) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoredTrustMatrix performs a merge with any union data inside the TrustMatrixRef, using the provided StoredTrustMatrix
func (t *TrustMatrixRef) MergeStoredTrustMatrix(v StoredTrustMatrix) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsObjectStorageTrustMatrix returns the union data inside the TrustMatrixRef as a ObjectStorageTrustMatrix
func (t TrustMatrixRef) AsObjectStorageTrustMatrix() (ObjectStorageTrustMatrix, error) {
	var body ObjectStorageTrustMatrix
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObjectStorageTrustMatrix overwrites any union data inside the TrustMatrixRef as the provided ObjectStorageTrustMatrix
func (t *TrustMatrixRef) FromObjectStorageTrustMatrix(v ObjectStorageTrustMatrix) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObjectStorageTrustMatrix performs a merge with any union data inside the TrustMatrixRef, using the provided ObjectStorageTrustMatrix
func (t *TrustMatrixRef) MergeObjectStorageTrustMatrix(v ObjectStorageTrustMatrix) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustMatrixRef) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["scheme"], err = json.Marshal(t.Scheme)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'scheme': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *TrustMatrixRef) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["scheme"]; found {
		err = json.Unmarshal(raw, &t.Scheme)
		if err != nil {
			return fmt.Errorf("error reading 'scheme': %w", err)
		}
	}

	return err
}

// AsInlineTrustVector returns the union data inside the TrustVectorRef as a InlineTrustVector
func (t TrustVectorRef) AsInlineTrustVector() (InlineTrustVector, error) {
	var body InlineTrustVector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineTrustVector overwrites any union data inside the TrustVectorRef as the provided InlineTrustVector
func (t *TrustVectorRef) FromInlineTrustVector(v InlineTrustVector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineTrustVector performs a merge with any union data inside the TrustVectorRef, using the provided InlineTrustVector
func (t *TrustVectorRef) MergeInlineTrustVector(v InlineTrustVector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsObjectStorageTrustVector returns the union data inside the TrustVectorRef as a ObjectStorageTrustVector
func (t TrustVectorRef) AsObjectStorageTrustVector() (ObjectStorageTrustVector, error) {
	var body ObjectStorageTrustVector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObjectStorageTrustVector overwrites any union data inside the TrustVectorRef as the provided ObjectStorageTrustVector
func (t *TrustVectorRef) FromObjectStorageTrustVector(v ObjectStorageTrustVector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObjectStorageTrustVector performs a merge with any union data inside the TrustVectorRef, using the provided ObjectStorageTrustVector
func (t *TrustVectorRef) MergeObjectStorageTrustVector(v ObjectStorageTrustVector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustVectorRef) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["scheme"], err = json.Marshal(t.Scheme)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'scheme': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *TrustVectorRef) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["scheme"]; found {
		err = json.Unmarshal(raw, &t.Scheme)
		if err != nil {
			return fmt.Errorf("error reading 'scheme': %w", err)
		}
	}

	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ComputeWithBody request with any body
	ComputeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Compute(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ComputeWithStatsWithBody request with any body
	ComputeWithStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ComputeWithStats(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLocalTrust request
	DeleteLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocalTrust request
	GetLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadLocalTrust request
	HeadLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateLocalTrustWithBody request with any body
	UpdateLocalTrustWithBody(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateLocalTrust(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, body UpdateLocalTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ComputeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Compute(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComputeWithStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeWithStatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComputeWithStats(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeWithStatsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLocalTrustRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocalTrustRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadLocalTrustRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLocalTrustWithBody(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLocalTrustRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLocalTrust(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, body UpdateLocalTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLocalTrustRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewComputeRequest calls the generic Compute builder with application/json body
func NewComputeRequest(server string, body ComputeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComputeRequestWithBody(server, "application/json", bodyReader)
}

// NewComputeRequestWithBody generates requests for Compute with any type of body
func NewComputeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewComputeWithStatsRequest calls the generic ComputeWithStats builder with application/json body
func NewComputeWithStatsRequest(server string, body ComputeWithStatsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComputeWithStatsRequestWithBody(server, "application/json", bodyReader)
}

// NewComputeWithStatsRequestWithBody generates requests for ComputeWithStats with any type of body
func NewComputeWithStatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute-with-stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLocalTrustRequest generates requests for DeleteLocalTrust
func NewDeleteLocalTrustRequest(server string, id LocalTrustIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/local-trust/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocalTrustRequest generates requests for GetLocalTrust
func NewGetLocalTrustRequest(server string, id LocalTrustIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/local-trust/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadLocalTrustRequest generates requests for HeadLocalTrust
func NewHeadLocalTrustRequest(server string, id LocalTrustIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/local-trust/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateLocalTrustRequest calls the generic UpdateLocalTrust builder with application/json body
func NewUpdateLocalTrustRequest(server string, id LocalTrustIdParam, params *UpdateLocalTrustParams, body UpdateLocalTrustJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLocalTrustRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateLocalTrustRequestWithBody generates requests for UpdateLocalTrust with any type of body
func NewUpdateLocalTrustRequestWithBody(server string, id LocalTrustIdParam, params *UpdateLocalTrustParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/local-trust/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Merge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "merge", runtime.ParamLocationQuery, *params.Merge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ComputeWithBodyWithResponse request with any body
	ComputeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeResponse, error)

	ComputeWithResponse(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeResponse, error)

	// ComputeWithStatsWithBodyWithResponse request with any body
	ComputeWithStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error)

	ComputeWithStatsWithResponse(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error)

	// DeleteLocalTrustWithResponse request
	DeleteLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*DeleteLocalTrustResponse, error)

	// GetLocalTrustWithResponse request
	GetLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*GetLocalTrustResponse, error)

	// HeadLocalTrustWithResponse request
	HeadLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*HeadLocalTrustResponse, error)

	// UpdateLocalTrustWithBodyWithResponse request with any body
	UpdateLocalTrustWithBodyWithResponse(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLocalTrustResponse, error)

	UpdateLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, body UpdateLocalTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLocalTrustResponse, error)

	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)
}

type ComputeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrustVectorRef
	JSON400      *InvalidRequest
}

// Status returns HTTPResponse.Status
func (r ComputeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComputeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ComputeWithStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputeWithStatsResponseOK
	JSON400      *InvalidRequest
}

// Status returns HTTPResponse.Status
func (r ComputeWithStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComputeWithStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLocalTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *InvalidRequest
}

// Status returns HTTPResponse.Status
func (r DeleteLocalTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLocalTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocalTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InlineTrustMatrix
}

// Status returns HTTPResponse.Status
func (r GetLocalTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocalTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadLocalTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadLocalTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadLocalTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLocalTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *InvalidRequest
}

// Status returns HTTPResponse.Status
func (r UpdateLocalTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLocalTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerReady
	JSON500      *ServerNotReady
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ComputeWithBodyWithResponse request with arbitrary body returning *ComputeResponse
func (c *ClientWithResponses) ComputeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeResponse, error) {
	rsp, err := c.ComputeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeResponse(rsp)
}

func (c *ClientWithResponses) ComputeWithResponse(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeResponse, error) {
	rsp, err := c.Compute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeResponse(rsp)
}

// ComputeWithStatsWithBodyWithResponse request with arbitrary body returning *ComputeWithStatsResponse
func (c *ClientWithResponses) ComputeWithStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error) {
	rsp, err := c.ComputeWithStatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeWithStatsResponse(rsp)
}

func (c *ClientWithResponses) ComputeWithStatsWithResponse(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error) {
	rsp, err := c.ComputeWithStats(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeWithStatsResponse(rsp)
}

// DeleteLocalTrustWithResponse request returning *DeleteLocalTrustResponse
func (c *ClientWithResponses) DeleteLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*DeleteLocalTrustResponse, error) {
	rsp, err := c.DeleteLocalTrust(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLocalTrustResponse(rsp)
}

// GetLocalTrustWithResponse request returning *GetLocalTrustResponse
func (c *ClientWithResponses) GetLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*GetLocalTrustResponse, error) {
	rsp, err := c.GetLocalTrust(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocalTrustResponse(rsp)
}

// HeadLocalTrustWithResponse request returning *HeadLocalTrustResponse
func (c *ClientWithResponses) HeadLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*HeadLocalTrustResponse, error) {
	rsp, err := c.HeadLocalTrust(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadLocalTrustResponse(rsp)
}

// UpdateLocalTrustWithBodyWithResponse request with arbitrary body returning *UpdateLocalTrustResponse
func (c *ClientWithResponses) UpdateLocalTrustWithBodyWithResponse(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLocalTrustResponse, error) {
	rsp, err := c.UpdateLocalTrustWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLocalTrustResponse(rsp)
}

func (c *ClientWithResponses) UpdateLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, body UpdateLocalTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLocalTrustResponse, error) {
	rsp, err := c.UpdateLocalTrust(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLocalTrustResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// ParseComputeResponse parses an HTTP response from a ComputeWithResponse call
func ParseComputeResponse(rsp *http.Response) (*ComputeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComputeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrustVectorRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseComputeWithStatsResponse parses an HTTP response from a ComputeWithStatsWithResponse call
func ParseComputeWithStatsResponse(rsp *http.Response) (*ComputeWithStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComputeWithStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputeWithStatsResponseOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteLocalTrustResponse parses an HTTP response from a DeleteLocalTrustWithResponse call
func ParseDeleteLocalTrustResponse(rsp *http.Response) (*DeleteLocalTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLocalTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetLocalTrustResponse parses an HTTP response from a GetLocalTrustWithResponse call
func ParseGetLocalTrustResponse(rsp *http.Response) (*GetLocalTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocalTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InlineTrustMatrix
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHeadLocalTrustResponse parses an HTTP response from a HeadLocalTrustWithResponse call
func ParseHeadLocalTrustResponse(rsp *http.Response) (*HeadLocalTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadLocalTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateLocalTrustResponse parses an HTTP response from a UpdateLocalTrustWithResponse call
func ParseUpdateLocalTrustResponse(rsp *http.Response) (*UpdateLocalTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateLocalTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerReady
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerNotReady
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Compute EigenTrust scores
	// (POST /compute)
	Compute(ctx echo.Context) error
	// Compute EigenTrust scores, with execution statistics
	// (POST /compute-with-stats)
	ComputeWithStats(ctx echo.Context) error
	// Delete local trust
	// (DELETE /local-trust/{id})
	DeleteLocalTrust(ctx echo.Context, id LocalTrustIdParam) error
	// Retrieve local trust
	// (GET /local-trust/{id})
	GetLocalTrust(ctx echo.Context, id LocalTrustIdParam) error
	// Check for existence of local trust
	// (HEAD /local-trust/{id})
	HeadLocalTrust(ctx echo.Context, id LocalTrustIdParam) error
	// Update local trust
	// (PUT /local-trust/{id})
	UpdateLocalTrust(ctx echo.Context, id LocalTrustIdParam, params UpdateLocalTrustParams) error
	// Get the health check status
	// (GET /status)
	GetStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Compute converts echo context to params.
func (w *ServerInterfaceWrapper) Compute(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Compute(ctx)
	return err
}

// ComputeWithStats converts echo context to params.
func (w *ServerInterfaceWrapper) ComputeWithStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ComputeWithStats(ctx)
	return err
}

// DeleteLocalTrust converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLocalTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id LocalTrustIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLocalTrust(ctx, id)
	return err
}

// GetLocalTrust converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id LocalTrustIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalTrust(ctx, id)
	return err
}

// HeadLocalTrust converts echo context to params.
func (w *ServerInterfaceWrapper) HeadLocalTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id LocalTrustIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HeadLocalTrust(ctx, id)
	return err
}

// UpdateLocalTrust converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLocalTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id LocalTrustIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateLocalTrustParams
	// ------------- Optional query parameter "merge" -------------

	err = runtime.BindQueryParameter("form", true, false, "merge", ctx.QueryParams(), &params.Merge)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter merge: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLocalTrust(ctx, id, params)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/compute", wrapper.Compute)
	router.POST(baseURL+"/compute-with-stats", wrapper.ComputeWithStats)
	router.DELETE(baseURL+"/local-trust/:id", wrapper.DeleteLocalTrust)
	router.GET(baseURL+"/local-trust/:id", wrapper.GetLocalTrust)
	router.HEAD(baseURL+"/local-trust/:id", wrapper.HeadLocalTrust)
	router.PUT(baseURL+"/local-trust/:id", wrapper.UpdateLocalTrust)
	router.GET(baseURL+"/status", wrapper.GetStatus)

}

type ComputeWithStatsResponseOKJSONResponse ComputeWithStatsResponseOK

type InvalidRequestJSONResponse InvalidRequest

type ServerNotReadyJSONResponse ServerStatus

type ServerReadyJSONResponse ServerStatus

type ComputeRequestObject struct {
	Body *ComputeJSONRequestBody
}

type ComputeResponseObject interface {
	VisitComputeResponse(w http.ResponseWriter) error
}

type Compute200JSONResponse TrustVectorRef

func (response Compute200JSONResponse) VisitComputeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.union)
}

type Compute400JSONResponse struct{ InvalidRequestJSONResponse }

func (response Compute400JSONResponse) VisitComputeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ComputeWithStatsRequestObject struct {
	Body *ComputeWithStatsJSONRequestBody
}

type ComputeWithStatsResponseObject interface {
	VisitComputeWithStatsResponse(w http.ResponseWriter) error
}

type ComputeWithStats200JSONResponse struct {
	ComputeWithStatsResponseOKJSONResponse
}

func (response ComputeWithStats200JSONResponse) VisitComputeWithStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ComputeWithStats400JSONResponse struct{ InvalidRequestJSONResponse }

func (response ComputeWithStats400JSONResponse) VisitComputeWithStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLocalTrustRequestObject struct {
	Id LocalTrustIdParam `json:"id"`
}

type DeleteLocalTrustResponseObject interface {
	VisitDeleteLocalTrustResponse(w http.ResponseWriter) error
}

type DeleteLocalTrust204Response struct {
}

func (response DeleteLocalTrust204Response) VisitDeleteLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteLocalTrust400JSONResponse struct{ InvalidRequestJSONResponse }

func (response DeleteLocalTrust400JSONResponse) VisitDeleteLocalTrustResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLocalTrust404Response struct {
}

func (response DeleteLocalTrust404Response) VisitDeleteLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetLocalTrustRequestObject struct {
	Id LocalTrustIdParam `json:"id"`
}

type GetLocalTrustResponseObject interface {
	VisitGetLocalTrustResponse(w http.ResponseWriter) error
}

type GetLocalTrust200JSONResponse InlineTrustMatrix

func (response GetLocalTrust200JSONResponse) VisitGetLocalTrustResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLocalTrust404Response struct {
}

func (response GetLocalTrust404Response) VisitGetLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type HeadLocalTrustRequestObject struct {
	Id LocalTrustIdParam `json:"id"`
}

type HeadLocalTrustResponseObject interface {
	VisitHeadLocalTrustResponse(w http.ResponseWriter) error
}

type HeadLocalTrust204Response struct {
}

func (response HeadLocalTrust204Response) VisitHeadLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type HeadLocalTrust404Response struct {
}

func (response HeadLocalTrust404Response) VisitHeadLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateLocalTrustRequestObject struct {
	Id     LocalTrustIdParam `json:"id"`
	Params UpdateLocalTrustParams
	Body   *UpdateLocalTrustJSONRequestBody
}

type UpdateLocalTrustResponseObject interface {
	VisitUpdateLocalTrustResponse(w http.ResponseWriter) error
}

type UpdateLocalTrust200Response struct {
}

func (response UpdateLocalTrust200Response) VisitUpdateLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateLocalTrust201Response struct {
}

func (response UpdateLocalTrust201Response) VisitUpdateLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type UpdateLocalTrust400JSONResponse struct{ InvalidRequestJSONResponse }

func (response UpdateLocalTrust400JSONResponse) VisitUpdateLocalTrustResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetStatusRequestObject struct {
}

type GetStatusResponseObject interface {
	VisitGetStatusResponse(w http.ResponseWriter) error
}

type GetStatus200JSONResponse struct{ ServerReadyJSONResponse }

func (response GetStatus200JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStatus500JSONResponse struct{ ServerNotReadyJSONResponse }

func (response GetStatus500JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Compute EigenTrust scores
	// (POST /compute)
	Compute(ctx context.Context, request ComputeRequestObject) (ComputeResponseObject, error)
	// Compute EigenTrust scores, with execution statistics
	// (POST /compute-with-stats)
	ComputeWithStats(ctx context.Context, request ComputeWithStatsRequestObject) (ComputeWithStatsResponseObject, error)
	// Delete local trust
	// (DELETE /local-trust/{id})
	DeleteLocalTrust(ctx context.Context, request DeleteLocalTrustRequestObject) (DeleteLocalTrustResponseObject, error)
	// Retrieve local trust
	// (GET /local-trust/{id})
	GetLocalTrust(ctx context.Context, request GetLocalTrustRequestObject) (GetLocalTrustResponseObject, error)
	// Check for existence of local trust
	// (HEAD /local-trust/{id})
	HeadLocalTrust(ctx context.Context, request HeadLocalTrustRequestObject) (HeadLocalTrustResponseObject, error)
	// Update local trust
	// (PUT /local-trust/{id})
	UpdateLocalTrust(ctx context.Context, request UpdateLocalTrustRequestObject) (UpdateLocalTrustResponseObject, error)
	// Get the health check status
	// (GET /status)
	GetStatus(ctx context.Context, request GetStatusRequestObject) (GetStatusResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Compute operation middleware
func (sh *strictHandler) Compute(ctx echo.Context) error {
	var request ComputeRequestObject

	var body ComputeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Compute(ctx.Request().Context(), request.(ComputeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Compute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ComputeResponseObject); ok {
		return validResponse.VisitComputeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ComputeWithStats operation middleware
func (sh *strictHandler) ComputeWithStats(ctx echo.Context) error {
	var request ComputeWithStatsRequestObject

	var body ComputeWithStatsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ComputeWithStats(ctx.Request().Context(), request.(ComputeWithStatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ComputeWithStats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ComputeWithStatsResponseObject); ok {
		return validResponse.VisitComputeWithStatsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteLocalTrust operation middleware
func (sh *strictHandler) DeleteLocalTrust(ctx echo.Context, id LocalTrustIdParam) error {
	var request DeleteLocalTrustRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLocalTrust(ctx.Request().Context(), request.(DeleteLocalTrustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLocalTrust")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteLocalTrustResponseObject); ok {
		return validResponse.VisitDeleteLocalTrustResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetLocalTrust operation middleware
func (sh *strictHandler) GetLocalTrust(ctx echo.Context, id LocalTrustIdParam) error {
	var request GetLocalTrustRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLocalTrust(ctx.Request().Context(), request.(GetLocalTrustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLocalTrust")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetLocalTrustResponseObject); ok {
		return validResponse.VisitGetLocalTrustResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// HeadLocalTrust operation middleware
func (sh *strictHandler) HeadLocalTrust(ctx echo.Context, id LocalTrustIdParam) error {
	var request HeadLocalTrustRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HeadLocalTrust(ctx.Request().Context(), request.(HeadLocalTrustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HeadLocalTrust")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HeadLocalTrustResponseObject); ok {
		return validResponse.VisitHeadLocalTrustResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateLocalTrust operation middleware
func (sh *strictHandler) UpdateLocalTrust(ctx echo.Context, id LocalTrustIdParam, params UpdateLocalTrustParams) error {
	var request UpdateLocalTrustRequestObject

	request.Id = id
	request.Params = params

	var body UpdateLocalTrustJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLocalTrust(ctx.Request().Context(), request.(UpdateLocalTrustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLocalTrust")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateLocalTrustResponseObject); ok {
		return validResponse.VisitUpdateLocalTrustResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetStatus operation middleware
func (sh *strictHandler) GetStatus(ctx echo.Context) error {
	var request GetStatusRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStatus(ctx.Request().Context(), request.(GetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetStatusResponseObject); ok {
		return validResponse.VisitGetStatusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"gwNLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
