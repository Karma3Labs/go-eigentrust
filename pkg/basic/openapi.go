// Package basic provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package basic

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for InlineTrustVectorScheme.
const (
	InlineTrustVectorSchemeInline InlineTrustVectorScheme = "inline"
)

// Defines values for LocalTrustRefScheme.
const (
	LocalTrustRefSchemeInline LocalTrustRefScheme = "inline"
	LocalTrustRefSchemeStored LocalTrustRefScheme = "stored"
)

// FlatTailStats Flat-tail algorithm stats and peer ranking.
type FlatTailStats struct {
	// DeltaNorm The d value as of the head of the last flat-tail.
	// This can be used to fine-tune epsilon
	// even when not using flat-tail algorithm.
	DeltaNorm float64 `json:"deltaNorm"`

	// Length The flat-tail length (say, L, then
	// the last L+1 iterations had the same ranking).
	// This is the number of iterations that could be saved
	// by using flat-tail algorithm
	// (passing flatTail equal to the threshold stat below)
	// while achieving the same result.
	Length int `json:"length"`

	// Ranking The sorted ranking of peer indices.
	// Peers not found here have zero global trust.
	Ranking []int `json:"ranking"`

	// Threshold The suggested minimum threshold parameter (flatTail).
	// It is determined from false flat tails observed.
	// Example: If a ranking pattern ABCDDEEEEFFFFFFFFFF was observed
	// (each letter is a distinct ranking) before epsilon was reached,
	// both DD and EEEE are false flat tails
	// of length 1 and 3 respectively.
	// In this case, Threshold=4 is suggested in order to ignore
	// these false flat tails.
	Threshold int `json:"threshold"`
}

// InlineLocalTrust Refers to a local trust matrix "inline".
//
// Instead of pointing (referencing) to an externally stored local trust,
// it carries the contents of the local trust matrix
// within the reference object itself.
type InlineLocalTrust struct {
	// Entries Contains the non-zero entries in the local trust matrix.
	//
	// Truster/trustee pairs missing here are assigned zero direct trust,
	// i.e. no trust relationship.
	Entries []InlineLocalTrustEntry `json:"entries"`

	// Size Denotes the number of peers in the local trust,
	// i.e. its square dimension.
	Size int `json:"size"`
}

// InlineLocalTrustEntry Represents an entry in the local trust matrix.
//
// Denotes that one peer (`i`) places a direct trust in another peer (`j`)
// by a specific amount (`v`).
type InlineLocalTrustEntry struct {
	// I Denotes the trusting peer.
	//
	// It is a zero-based index,
	// and must be less than the size (dimension)
	// of the enclosing local trust matrix.
	I int `json:"i"`

	// J Denotes the trusted peer.
	//
	// It is a zero-based index,
	// and must be less than the size (dimension)
	// of the enclosing local trust matrix.
	J int `json:"j"`

	// V Represents the (positive) amount of trust
	// placed by peer `i` in peer `j`.
	V float64 `json:"v"`
}

// InlineTrustVector Refers to a trust vector "inline".
//
// Instead of pointing (referencing) to an externally stored trust vector,
// it carries the contents of the trust vector
// within the reference object itself.
type InlineTrustVector struct {
	// Entries Contains the non-zero entries in the trust vector.
	//
	// Peers missing here are assigned zero amount of trust.
	Entries []InlineTrustVectorEntry `json:"entries"`

	// Scheme A fixed string `"inline"` to denote an inline reference.
	Scheme InlineTrustVectorScheme `json:"scheme"`

	// Size Denotes the number of peers in the trust vector, i.e. its length.
	Size int `json:"size"`
}

// InlineTrustVectorScheme A fixed string `"inline"` to denote an inline reference.
type InlineTrustVectorScheme string

// InlineTrustVectorEntry Represents an entry in the local trust matrix.
//
// Denotes that a trust is placed in a peer (`i`)
// by a specific amount (`v`).
type InlineTrustVectorEntry struct {
	// I Denotes the peer.
	//
	// It is a zero-based index,
	// and must be less than the length of the enclosing trust vector.
	I int `json:"i"`

	// V Represents the (positive) amount of trust placed in peer `i`.
	V float64 `json:"v"`
}

// LocalTrustId Denotes a local trust collection.
type LocalTrustId = string

// LocalTrustRef defines model for LocalTrustRef.
type LocalTrustRef struct {
	// Scheme Local trust reference scheme, akin to URI scheme.
	Scheme LocalTrustRefScheme `json:"scheme"`
	union  json.RawMessage
}

// LocalTrustRefScheme Local trust reference scheme, akin to URI scheme.
type LocalTrustRefScheme string

// StoredLocalTrust Refers to a local trust stored on the server.
//
// Stored local trust is identified with its ID string.
type StoredLocalTrust struct {
	// Id Denotes a local trust collection.
	Id LocalTrustId `json:"id"`
}

// TrustVectorRef Refers to a trust vector.
type TrustVectorRef struct {
	union json.RawMessage
}

// LocalTrustIdParam Denotes a local trust collection.
type LocalTrustIdParam = LocalTrustId

// ComputeWithStatsResponseOK defines model for ComputeWithStatsResponseOK.
type ComputeWithStatsResponseOK struct {
	// EigenTrust Refers to a trust vector.
	EigenTrust TrustVectorRef `json:"eigenTrust"`

	// FlatTailStats Flat-tail algorithm stats and peer ranking.
	FlatTailStats FlatTailStats `json:"flatTailStats"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Message Describes the error in a human-readable message.
	//
	// It may be empty.
	Message string `json:"message"`
}

// ComputeRequestBody defines model for ComputeRequestBody.
type ComputeRequestBody struct {
	Alpha   *float64 `json:"alpha,omitempty"`
	Epsilon *float64 `json:"epsilon,omitempty"`

	// FlatTail The length of the flat tail
	// (ranking unchanged from previous iteration)
	// that must be seen before terminating the recursion.
	// 0 means a flat tail need not be seen,
	// and the recursion is terminated solely based upon epsilon.
	FlatTail *int `json:"flatTail,omitempty"`

	// InitialTrust Refers to a trust vector.
	InitialTrust *TrustVectorRef `json:"initialTrust,omitempty"`

	// LocalTrust refers to a local trust.
	LocalTrust LocalTrustRef `json:"localTrust"`

	// MaxIterations The maximum number of iterations after which to stop
	// even if other termination criteria are not met.
	// 0 means no limit.
	MaxIterations *int `json:"maxIterations,omitempty"`

	// NumLeaders The number of top-ranking peers to consider
	// for the purpose of flat-tail algorithm.  0 means everyone.
	NumLeaders *int `json:"numLeaders,omitempty"`

	// PreTrust Refers to a trust vector.
	PreTrust *TrustVectorRef `json:"preTrust,omitempty"`
}

// ComputeJSONBody defines parameters for Compute.
type ComputeJSONBody struct {
	Alpha   *float64 `json:"alpha,omitempty"`
	Epsilon *float64 `json:"epsilon,omitempty"`

	// FlatTail The length of the flat tail
	// (ranking unchanged from previous iteration)
	// that must be seen before terminating the recursion.
	// 0 means a flat tail need not be seen,
	// and the recursion is terminated solely based upon epsilon.
	FlatTail *int `json:"flatTail,omitempty"`

	// InitialTrust Refers to a trust vector.
	InitialTrust *TrustVectorRef `json:"initialTrust,omitempty"`

	// LocalTrust refers to a local trust.
	LocalTrust LocalTrustRef `json:"localTrust"`

	// MaxIterations The maximum number of iterations after which to stop
	// even if other termination criteria are not met.
	// 0 means no limit.
	MaxIterations *int `json:"maxIterations,omitempty"`

	// NumLeaders The number of top-ranking peers to consider
	// for the purpose of flat-tail algorithm.  0 means everyone.
	NumLeaders *int `json:"numLeaders,omitempty"`

	// PreTrust Refers to a trust vector.
	PreTrust *TrustVectorRef `json:"preTrust,omitempty"`
}

// ComputeWithStatsJSONBody defines parameters for ComputeWithStats.
type ComputeWithStatsJSONBody struct {
	Alpha   *float64 `json:"alpha,omitempty"`
	Epsilon *float64 `json:"epsilon,omitempty"`

	// FlatTail The length of the flat tail
	// (ranking unchanged from previous iteration)
	// that must be seen before terminating the recursion.
	// 0 means a flat tail need not be seen,
	// and the recursion is terminated solely based upon epsilon.
	FlatTail *int `json:"flatTail,omitempty"`

	// InitialTrust Refers to a trust vector.
	InitialTrust *TrustVectorRef `json:"initialTrust,omitempty"`

	// LocalTrust refers to a local trust.
	LocalTrust LocalTrustRef `json:"localTrust"`

	// MaxIterations The maximum number of iterations after which to stop
	// even if other termination criteria are not met.
	// 0 means no limit.
	MaxIterations *int `json:"maxIterations,omitempty"`

	// NumLeaders The number of top-ranking peers to consider
	// for the purpose of flat-tail algorithm.  0 means everyone.
	NumLeaders *int `json:"numLeaders,omitempty"`

	// PreTrust Refers to a trust vector.
	PreTrust *TrustVectorRef `json:"preTrust,omitempty"`
}

// ComputeJSONRequestBody defines body for Compute for application/json ContentType.
type ComputeJSONRequestBody ComputeJSONBody

// ComputeWithStatsJSONRequestBody defines body for ComputeWithStats for application/json ContentType.
type ComputeWithStatsJSONRequestBody ComputeWithStatsJSONBody

// UpdateLocalTrustJSONRequestBody defines body for UpdateLocalTrust for application/json ContentType.
type UpdateLocalTrustJSONRequestBody = LocalTrustRef

// AsInlineLocalTrust returns the union data inside the LocalTrustRef as a InlineLocalTrust
func (t LocalTrustRef) AsInlineLocalTrust() (InlineLocalTrust, error) {
	var body InlineLocalTrust
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineLocalTrust overwrites any union data inside the LocalTrustRef as the provided InlineLocalTrust
func (t *LocalTrustRef) FromInlineLocalTrust(v InlineLocalTrust) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineLocalTrust performs a merge with any union data inside the LocalTrustRef, using the provided InlineLocalTrust
func (t *LocalTrustRef) MergeInlineLocalTrust(v InlineLocalTrust) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsStoredLocalTrust returns the union data inside the LocalTrustRef as a StoredLocalTrust
func (t LocalTrustRef) AsStoredLocalTrust() (StoredLocalTrust, error) {
	var body StoredLocalTrust
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoredLocalTrust overwrites any union data inside the LocalTrustRef as the provided StoredLocalTrust
func (t *LocalTrustRef) FromStoredLocalTrust(v StoredLocalTrust) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoredLocalTrust performs a merge with any union data inside the LocalTrustRef, using the provided StoredLocalTrust
func (t *LocalTrustRef) MergeStoredLocalTrust(v StoredLocalTrust) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LocalTrustRef) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["scheme"], err = json.Marshal(t.Scheme)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'scheme': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *LocalTrustRef) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["scheme"]; found {
		err = json.Unmarshal(raw, &t.Scheme)
		if err != nil {
			return fmt.Errorf("error reading 'scheme': %w", err)
		}
	}

	return err
}

// AsInlineTrustVector returns the union data inside the TrustVectorRef as a InlineTrustVector
func (t TrustVectorRef) AsInlineTrustVector() (InlineTrustVector, error) {
	var body InlineTrustVector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineTrustVector overwrites any union data inside the TrustVectorRef as the provided InlineTrustVector
func (t *TrustVectorRef) FromInlineTrustVector(v InlineTrustVector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineTrustVector performs a merge with any union data inside the TrustVectorRef, using the provided InlineTrustVector
func (t *TrustVectorRef) MergeInlineTrustVector(v InlineTrustVector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t TrustVectorRef) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustVectorRef) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Compute request with any body
	ComputeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Compute(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ComputeWithStats request with any body
	ComputeWithStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ComputeWithStats(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLocalTrust request
	DeleteLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocalTrust request
	GetLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadLocalTrust request
	HeadLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateLocalTrust request with any body
	UpdateLocalTrustWithBody(ctx context.Context, id LocalTrustIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateLocalTrust(ctx context.Context, id LocalTrustIdParam, body UpdateLocalTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ComputeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Compute(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComputeWithStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeWithStatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComputeWithStats(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeWithStatsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLocalTrustRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocalTrustRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadLocalTrustRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLocalTrustWithBody(ctx context.Context, id LocalTrustIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLocalTrustRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLocalTrust(ctx context.Context, id LocalTrustIdParam, body UpdateLocalTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLocalTrustRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewComputeRequest calls the generic Compute builder with application/json body
func NewComputeRequest(server string, body ComputeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComputeRequestWithBody(server, "application/json", bodyReader)
}

// NewComputeRequestWithBody generates requests for Compute with any type of body
func NewComputeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewComputeWithStatsRequest calls the generic ComputeWithStats builder with application/json body
func NewComputeWithStatsRequest(server string, body ComputeWithStatsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComputeWithStatsRequestWithBody(server, "application/json", bodyReader)
}

// NewComputeWithStatsRequestWithBody generates requests for ComputeWithStats with any type of body
func NewComputeWithStatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute-with-stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLocalTrustRequest generates requests for DeleteLocalTrust
func NewDeleteLocalTrustRequest(server string, id LocalTrustIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/local-trust/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocalTrustRequest generates requests for GetLocalTrust
func NewGetLocalTrustRequest(server string, id LocalTrustIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/local-trust/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadLocalTrustRequest generates requests for HeadLocalTrust
func NewHeadLocalTrustRequest(server string, id LocalTrustIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/local-trust/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateLocalTrustRequest calls the generic UpdateLocalTrust builder with application/json body
func NewUpdateLocalTrustRequest(server string, id LocalTrustIdParam, body UpdateLocalTrustJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLocalTrustRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateLocalTrustRequestWithBody generates requests for UpdateLocalTrust with any type of body
func NewUpdateLocalTrustRequestWithBody(server string, id LocalTrustIdParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/local-trust/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Compute request with any body
	ComputeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeResponse, error)

	ComputeWithResponse(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeResponse, error)

	// ComputeWithStats request with any body
	ComputeWithStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error)

	ComputeWithStatsWithResponse(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error)

	// DeleteLocalTrust request
	DeleteLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*DeleteLocalTrustResponse, error)

	// GetLocalTrust request
	GetLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*GetLocalTrustResponse, error)

	// HeadLocalTrust request
	HeadLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*HeadLocalTrustResponse, error)

	// UpdateLocalTrust request with any body
	UpdateLocalTrustWithBodyWithResponse(ctx context.Context, id LocalTrustIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLocalTrustResponse, error)

	UpdateLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, body UpdateLocalTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLocalTrustResponse, error)
}

type ComputeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrustVectorRef
	JSON400      *struct {
		// Message Describes the error in a human-readable message.
		//
		// It may be empty.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r ComputeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComputeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ComputeWithStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// EigenTrust Refers to a trust vector.
		EigenTrust TrustVectorRef `json:"eigenTrust"`

		// FlatTailStats Flat-tail algorithm stats and peer ranking.
		FlatTailStats FlatTailStats `json:"flatTailStats"`
	}
	JSON400 *struct {
		// Message Describes the error in a human-readable message.
		//
		// It may be empty.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r ComputeWithStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComputeWithStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLocalTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Message Describes the error in a human-readable message.
		//
		// It may be empty.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteLocalTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLocalTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocalTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InlineLocalTrust
}

// Status returns HTTPResponse.Status
func (r GetLocalTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocalTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadLocalTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadLocalTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadLocalTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLocalTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		// Message Describes the error in a human-readable message.
		//
		// It may be empty.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateLocalTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLocalTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ComputeWithBodyWithResponse request with arbitrary body returning *ComputeResponse
func (c *ClientWithResponses) ComputeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeResponse, error) {
	rsp, err := c.ComputeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeResponse(rsp)
}

func (c *ClientWithResponses) ComputeWithResponse(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeResponse, error) {
	rsp, err := c.Compute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeResponse(rsp)
}

// ComputeWithStatsWithBodyWithResponse request with arbitrary body returning *ComputeWithStatsResponse
func (c *ClientWithResponses) ComputeWithStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error) {
	rsp, err := c.ComputeWithStatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeWithStatsResponse(rsp)
}

func (c *ClientWithResponses) ComputeWithStatsWithResponse(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error) {
	rsp, err := c.ComputeWithStats(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeWithStatsResponse(rsp)
}

// DeleteLocalTrustWithResponse request returning *DeleteLocalTrustResponse
func (c *ClientWithResponses) DeleteLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*DeleteLocalTrustResponse, error) {
	rsp, err := c.DeleteLocalTrust(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLocalTrustResponse(rsp)
}

// GetLocalTrustWithResponse request returning *GetLocalTrustResponse
func (c *ClientWithResponses) GetLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*GetLocalTrustResponse, error) {
	rsp, err := c.GetLocalTrust(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocalTrustResponse(rsp)
}

// HeadLocalTrustWithResponse request returning *HeadLocalTrustResponse
func (c *ClientWithResponses) HeadLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*HeadLocalTrustResponse, error) {
	rsp, err := c.HeadLocalTrust(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadLocalTrustResponse(rsp)
}

// UpdateLocalTrustWithBodyWithResponse request with arbitrary body returning *UpdateLocalTrustResponse
func (c *ClientWithResponses) UpdateLocalTrustWithBodyWithResponse(ctx context.Context, id LocalTrustIdParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLocalTrustResponse, error) {
	rsp, err := c.UpdateLocalTrustWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLocalTrustResponse(rsp)
}

func (c *ClientWithResponses) UpdateLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, body UpdateLocalTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLocalTrustResponse, error) {
	rsp, err := c.UpdateLocalTrust(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLocalTrustResponse(rsp)
}

// ParseComputeResponse parses an HTTP response from a ComputeWithResponse call
func ParseComputeResponse(rsp *http.Response) (*ComputeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComputeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrustVectorRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Message Describes the error in a human-readable message.
			//
			// It may be empty.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseComputeWithStatsResponse parses an HTTP response from a ComputeWithStatsWithResponse call
func ParseComputeWithStatsResponse(rsp *http.Response) (*ComputeWithStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComputeWithStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// EigenTrust Refers to a trust vector.
			EigenTrust TrustVectorRef `json:"eigenTrust"`

			// FlatTailStats Flat-tail algorithm stats and peer ranking.
			FlatTailStats FlatTailStats `json:"flatTailStats"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Message Describes the error in a human-readable message.
			//
			// It may be empty.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteLocalTrustResponse parses an HTTP response from a DeleteLocalTrustWithResponse call
func ParseDeleteLocalTrustResponse(rsp *http.Response) (*DeleteLocalTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLocalTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Message Describes the error in a human-readable message.
			//
			// It may be empty.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetLocalTrustResponse parses an HTTP response from a GetLocalTrustWithResponse call
func ParseGetLocalTrustResponse(rsp *http.Response) (*GetLocalTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocalTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InlineLocalTrust
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHeadLocalTrustResponse parses an HTTP response from a HeadLocalTrustWithResponse call
func ParseHeadLocalTrustResponse(rsp *http.Response) (*HeadLocalTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadLocalTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateLocalTrustResponse parses an HTTP response from a UpdateLocalTrustWithResponse call
func ParseUpdateLocalTrustResponse(rsp *http.Response) (*UpdateLocalTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateLocalTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Message Describes the error in a human-readable message.
			//
			// It may be empty.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Compute EigenTrust scores
	// (POST /compute)
	Compute(ctx echo.Context) error
	// Compute EigenTrust scores, with execution statistics
	// (POST /compute-with-stats)
	ComputeWithStats(ctx echo.Context) error
	// Delete local trust
	// (DELETE /local-trust/{id})
	DeleteLocalTrust(ctx echo.Context, id LocalTrustIdParam) error
	// Retrieve local trust
	// (GET /local-trust/{id})
	GetLocalTrust(ctx echo.Context, id LocalTrustIdParam) error
	// Check for existence of local trust
	// (HEAD /local-trust/{id})
	HeadLocalTrust(ctx echo.Context, id LocalTrustIdParam) error
	// Update local trust
	// (PUT /local-trust/{id})
	UpdateLocalTrust(ctx echo.Context, id LocalTrustIdParam) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Compute converts echo context to params.
func (w *ServerInterfaceWrapper) Compute(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Compute(ctx)
	return err
}

// ComputeWithStats converts echo context to params.
func (w *ServerInterfaceWrapper) ComputeWithStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComputeWithStats(ctx)
	return err
}

// DeleteLocalTrust converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLocalTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id LocalTrustIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteLocalTrust(ctx, id)
	return err
}

// GetLocalTrust converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id LocalTrustIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLocalTrust(ctx, id)
	return err
}

// HeadLocalTrust converts echo context to params.
func (w *ServerInterfaceWrapper) HeadLocalTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id LocalTrustIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.HeadLocalTrust(ctx, id)
	return err
}

// UpdateLocalTrust converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLocalTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id LocalTrustIdParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateLocalTrust(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/compute", wrapper.Compute)
	router.POST(baseURL+"/compute-with-stats", wrapper.ComputeWithStats)
	router.DELETE(baseURL+"/local-trust/:id", wrapper.DeleteLocalTrust)
	router.GET(baseURL+"/local-trust/:id", wrapper.GetLocalTrust)
	router.HEAD(baseURL+"/local-trust/:id", wrapper.HeadLocalTrust)
	router.PUT(baseURL+"/local-trust/:id", wrapper.UpdateLocalTrust)

}

type ComputeWithStatsResponseOKJSONResponse struct {
	// EigenTrust Refers to a trust vector.
	EigenTrust TrustVectorRef `json:"eigenTrust"`

	// FlatTailStats Flat-tail algorithm stats and peer ranking.
	FlatTailStats FlatTailStats `json:"flatTailStats"`
}

type InvalidRequestJSONResponse struct {
	// Message Describes the error in a human-readable message.
	//
	// It may be empty.
	Message string `json:"message"`
}

type ComputeRequestObject struct {
	Body *ComputeJSONRequestBody
}

type ComputeResponseObject interface {
	VisitComputeResponse(w http.ResponseWriter) error
}

type Compute200JSONResponse TrustVectorRef

func (response Compute200JSONResponse) VisitComputeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.union)
}

type Compute400JSONResponse struct{ InvalidRequestJSONResponse }

func (response Compute400JSONResponse) VisitComputeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ComputeWithStatsRequestObject struct {
	Body *ComputeWithStatsJSONRequestBody
}

type ComputeWithStatsResponseObject interface {
	VisitComputeWithStatsResponse(w http.ResponseWriter) error
}

type ComputeWithStats200JSONResponse struct {
	ComputeWithStatsResponseOKJSONResponse
}

func (response ComputeWithStats200JSONResponse) VisitComputeWithStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ComputeWithStats400JSONResponse struct{ InvalidRequestJSONResponse }

func (response ComputeWithStats400JSONResponse) VisitComputeWithStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLocalTrustRequestObject struct {
	Id LocalTrustIdParam `json:"id,omitempty"`
}

type DeleteLocalTrustResponseObject interface {
	VisitDeleteLocalTrustResponse(w http.ResponseWriter) error
}

type DeleteLocalTrust204Response struct {
}

func (response DeleteLocalTrust204Response) VisitDeleteLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteLocalTrust400JSONResponse struct{ InvalidRequestJSONResponse }

func (response DeleteLocalTrust400JSONResponse) VisitDeleteLocalTrustResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLocalTrust404Response struct {
}

func (response DeleteLocalTrust404Response) VisitDeleteLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetLocalTrustRequestObject struct {
	Id LocalTrustIdParam `json:"id,omitempty"`
}

type GetLocalTrustResponseObject interface {
	VisitGetLocalTrustResponse(w http.ResponseWriter) error
}

type GetLocalTrust200JSONResponse InlineLocalTrust

func (response GetLocalTrust200JSONResponse) VisitGetLocalTrustResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLocalTrust404Response struct {
}

func (response GetLocalTrust404Response) VisitGetLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type HeadLocalTrustRequestObject struct {
	Id LocalTrustIdParam `json:"id,omitempty"`
}

type HeadLocalTrustResponseObject interface {
	VisitHeadLocalTrustResponse(w http.ResponseWriter) error
}

type HeadLocalTrust204Response struct {
}

func (response HeadLocalTrust204Response) VisitHeadLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type HeadLocalTrust404Response struct {
}

func (response HeadLocalTrust404Response) VisitHeadLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateLocalTrustRequestObject struct {
	Id   LocalTrustIdParam `json:"id,omitempty"`
	Body *UpdateLocalTrustJSONRequestBody
}

type UpdateLocalTrustResponseObject interface {
	VisitUpdateLocalTrustResponse(w http.ResponseWriter) error
}

type UpdateLocalTrust200Response struct {
}

func (response UpdateLocalTrust200Response) VisitUpdateLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateLocalTrust201Response struct {
}

func (response UpdateLocalTrust201Response) VisitUpdateLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type UpdateLocalTrust400JSONResponse struct{ InvalidRequestJSONResponse }

func (response UpdateLocalTrust400JSONResponse) VisitUpdateLocalTrustResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Compute EigenTrust scores
	// (POST /compute)
	Compute(ctx context.Context, request ComputeRequestObject) (ComputeResponseObject, error)
	// Compute EigenTrust scores, with execution statistics
	// (POST /compute-with-stats)
	ComputeWithStats(ctx context.Context, request ComputeWithStatsRequestObject) (ComputeWithStatsResponseObject, error)
	// Delete local trust
	// (DELETE /local-trust/{id})
	DeleteLocalTrust(ctx context.Context, request DeleteLocalTrustRequestObject) (DeleteLocalTrustResponseObject, error)
	// Retrieve local trust
	// (GET /local-trust/{id})
	GetLocalTrust(ctx context.Context, request GetLocalTrustRequestObject) (GetLocalTrustResponseObject, error)
	// Check for existence of local trust
	// (HEAD /local-trust/{id})
	HeadLocalTrust(ctx context.Context, request HeadLocalTrustRequestObject) (HeadLocalTrustResponseObject, error)
	// Update local trust
	// (PUT /local-trust/{id})
	UpdateLocalTrust(ctx context.Context, request UpdateLocalTrustRequestObject) (UpdateLocalTrustResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Compute operation middleware
func (sh *strictHandler) Compute(ctx echo.Context) error {
	var request ComputeRequestObject

	var body ComputeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Compute(ctx.Request().Context(), request.(ComputeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Compute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ComputeResponseObject); ok {
		return validResponse.VisitComputeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ComputeWithStats operation middleware
func (sh *strictHandler) ComputeWithStats(ctx echo.Context) error {
	var request ComputeWithStatsRequestObject

	var body ComputeWithStatsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ComputeWithStats(ctx.Request().Context(), request.(ComputeWithStatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ComputeWithStats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ComputeWithStatsResponseObject); ok {
		return validResponse.VisitComputeWithStatsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteLocalTrust operation middleware
func (sh *strictHandler) DeleteLocalTrust(ctx echo.Context, id LocalTrustIdParam) error {
	var request DeleteLocalTrustRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLocalTrust(ctx.Request().Context(), request.(DeleteLocalTrustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLocalTrust")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteLocalTrustResponseObject); ok {
		return validResponse.VisitDeleteLocalTrustResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetLocalTrust operation middleware
func (sh *strictHandler) GetLocalTrust(ctx echo.Context, id LocalTrustIdParam) error {
	var request GetLocalTrustRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLocalTrust(ctx.Request().Context(), request.(GetLocalTrustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLocalTrust")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetLocalTrustResponseObject); ok {
		return validResponse.VisitGetLocalTrustResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// HeadLocalTrust operation middleware
func (sh *strictHandler) HeadLocalTrust(ctx echo.Context, id LocalTrustIdParam) error {
	var request HeadLocalTrustRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HeadLocalTrust(ctx.Request().Context(), request.(HeadLocalTrustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HeadLocalTrust")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HeadLocalTrustResponseObject); ok {
		return validResponse.VisitHeadLocalTrustResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UpdateLocalTrust operation middleware
func (sh *strictHandler) UpdateLocalTrust(ctx echo.Context, id LocalTrustIdParam) error {
	var request UpdateLocalTrustRequestObject

	request.Id = id

	var body UpdateLocalTrustJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLocalTrust(ctx.Request().Context(), request.(UpdateLocalTrustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLocalTrust")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateLocalTrustResponseObject); ok {
		return validResponse.VisitUpdateLocalTrustResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
