// Package basic provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package basic

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for InlineLocalTrustScheme.
const (
	InlineLocalTrustSchemeInline InlineLocalTrustScheme = "inline"
)

// Defines values for InlineTrustVectorScheme.
const (
	InlineTrustVectorSchemeInline InlineTrustVectorScheme = "inline"
)

// InlineLocalTrust Refers to a local trust matrix "inline".
//
// Instead of pointing (referencing) to an externally stored local trust,
// it carries the contents of the local trust matrix
// within the reference object itself.
type InlineLocalTrust struct {
	// Entries Contains the non-zero entries in the local trust matrix.
	//
	// Truster/trustee pairs missing here are assigned zero direct trust,
	// i.e. no trust relationship.
	Entries []InlineLocalTrustEntry `json:"entries"`

	// Scheme A fixed string `"inline"` to denote an inline reference.
	Scheme InlineLocalTrustScheme `json:"scheme"`

	// Size Denotes the number of peers in the local trust,
	// i.e. its square dimension.
	Size int `json:"size"`
}

// InlineLocalTrustScheme A fixed string `"inline"` to denote an inline reference.
type InlineLocalTrustScheme string

// InlineLocalTrustEntry Represents an entry in the local trust matrix.
//
// Denotes that one peer (`i`) places a direct trust in another peer (`j`)
// by a specific amount (`v`).
type InlineLocalTrustEntry struct {
	// I Denotes the trusting peer.
	//
	// It is a zero-based index,
	// and must be less than the size (dimension)
	// of the enclosing local trust matrix.
	I int `json:"i"`

	// J Denotes the trusted peer.
	//
	// It is a zero-based index,
	// and must be less than the size (dimension)
	// of the enclosing local trust matrix.
	J int `json:"j"`

	// V Represents the (positive) amount of trust
	// placed by peer `i` in peer `j`.
	V float64 `json:"v"`
}

// InlineTrustVector Refers to a trust vector "inline".
//
// Instead of pointing (referencing) to an externally stored trust vector,
// it carries the contents of the trust vector
// within the reference object itself.
type InlineTrustVector struct {
	// Entries Contains the non-zero entries in the trust vector.
	//
	// Peers missing here are assigned zero amount of trust.
	Entries []InlineTrustVectorEntry `json:"entries"`

	// Scheme A fixed string `"inline"` to denote an inline reference.
	Scheme InlineTrustVectorScheme `json:"scheme"`

	// Size Denotes the number of peers in the trust vector, i.e. its length.
	Size int `json:"size"`
}

// InlineTrustVectorScheme A fixed string `"inline"` to denote an inline reference.
type InlineTrustVectorScheme string

// InlineTrustVectorEntry Represents an entry in the local trust matrix.
//
// Denotes that a trust is placed in a peer (`i`)
// by a specific amount (`v`).
type InlineTrustVectorEntry struct {
	// I Denotes the peer.
	//
	// It is a zero-based index,
	// and must be less than the length of the enclosing trust vector.
	I int `json:"i"`

	// V Represents the (positive) amount of trust placed in peer `i`.
	V float64 `json:"v"`
}

// LocalTrustRef refers to a local trust.
type LocalTrustRef struct {
	union json.RawMessage
}

// TrustVectorRef Refers to a trust vector.
type TrustVectorRef struct {
	union json.RawMessage
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Message Describes the error in a human-readable message.
	//
	// It may be empty.
	Message string `json:"message"`
}

// ComputeJSONBody defines parameters for Compute.
type ComputeJSONBody struct {
	Alpha   *float64 `json:"alpha,omitempty"`
	Epsilon *float64 `json:"epsilon,omitempty"`

	// LocalTrust refers to a local trust.
	LocalTrust LocalTrustRef `json:"localTrust"`

	// PreTrust Refers to a trust vector.
	PreTrust *TrustVectorRef `json:"preTrust,omitempty"`
}

// ComputeJSONRequestBody defines body for Compute for application/json ContentType.
type ComputeJSONRequestBody ComputeJSONBody

// AsInlineLocalTrust returns the union data inside the LocalTrustRef as a InlineLocalTrust
func (t LocalTrustRef) AsInlineLocalTrust() (InlineLocalTrust, error) {
	var body InlineLocalTrust
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineLocalTrust overwrites any union data inside the LocalTrustRef as the provided InlineLocalTrust
func (t *LocalTrustRef) FromInlineLocalTrust(v InlineLocalTrust) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineLocalTrust performs a merge with any union data inside the LocalTrustRef, using the provided InlineLocalTrust
func (t *LocalTrustRef) MergeInlineLocalTrust(v InlineLocalTrust) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LocalTrustRef) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LocalTrustRef) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInlineTrustVector returns the union data inside the TrustVectorRef as a InlineTrustVector
func (t TrustVectorRef) AsInlineTrustVector() (InlineTrustVector, error) {
	var body InlineTrustVector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineTrustVector overwrites any union data inside the TrustVectorRef as the provided InlineTrustVector
func (t *TrustVectorRef) FromInlineTrustVector(v InlineTrustVector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineTrustVector performs a merge with any union data inside the TrustVectorRef, using the provided InlineTrustVector
func (t *TrustVectorRef) MergeInlineTrustVector(v InlineTrustVector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t TrustVectorRef) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustVectorRef) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Compute request with any body
	ComputeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Compute(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ComputeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Compute(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewComputeRequest calls the generic Compute builder with application/json body
func NewComputeRequest(server string, body ComputeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComputeRequestWithBody(server, "application/json", bodyReader)
}

// NewComputeRequestWithBody generates requests for Compute with any type of body
func NewComputeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Compute request with any body
	ComputeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeResponse, error)

	ComputeWithResponse(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeResponse, error)
}

type ComputeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrustVectorRef
	JSON400      *struct {
		// Message Describes the error in a human-readable message.
		//
		// It may be empty.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r ComputeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComputeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ComputeWithBodyWithResponse request with arbitrary body returning *ComputeResponse
func (c *ClientWithResponses) ComputeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeResponse, error) {
	rsp, err := c.ComputeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeResponse(rsp)
}

func (c *ClientWithResponses) ComputeWithResponse(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeResponse, error) {
	rsp, err := c.Compute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeResponse(rsp)
}

// ParseComputeResponse parses an HTTP response from a ComputeWithResponse call
func ParseComputeResponse(rsp *http.Response) (*ComputeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComputeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrustVectorRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Message Describes the error in a human-readable message.
			//
			// It may be empty.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Compute EigenTrust scores
	// (POST /compute)
	Compute(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Compute converts echo context to params.
func (w *ServerInterfaceWrapper) Compute(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Compute(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/compute", wrapper.Compute)

}

type InvalidRequestJSONResponse struct {
	// Message Describes the error in a human-readable message.
	//
	// It may be empty.
	Message string `json:"message"`
}

type ComputeRequestObject struct {
	Body *ComputeJSONRequestBody
}

type ComputeResponseObject interface {
	VisitComputeResponse(w http.ResponseWriter) error
}

type Compute200JSONResponse TrustVectorRef

func (response Compute200JSONResponse) VisitComputeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.union)
}

type Compute400JSONResponse struct{ InvalidRequestJSONResponse }

func (response Compute400JSONResponse) VisitComputeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Compute EigenTrust scores
	// (POST /compute)
	Compute(ctx context.Context, request ComputeRequestObject) (ComputeResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Compute operation middleware
func (sh *strictHandler) Compute(ctx echo.Context) error {
	var request ComputeRequestObject

	var body ComputeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Compute(ctx.Request().Context(), request.(ComputeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Compute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ComputeResponseObject); ok {
		return validResponse.VisitComputeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dyYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
