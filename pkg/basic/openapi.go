// Package basic provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package basic

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for InlineLocalTrustScheme.
const (
	InlineLocalTrustSchemeInline InlineLocalTrustScheme = "inline"
)

// Defines values for InlineTrustVectorScheme.
const (
	InlineTrustVectorSchemeInline InlineTrustVectorScheme = "inline"
)

// FlatTailStats Flat-tail algorithm stats and peer ranking.
type FlatTailStats struct {
	// DeltaNorm The d value as of the head of the last flat-tail.
	// This can be used to fine-tune epsilon
	// even when not using flat-tail algorithm.
	DeltaNorm float64 `json:"deltaNorm"`

	// Length The flat-tail length (say, L, then
	// the last L+1 iterations had the same ranking).
	// This is the number of iterations that could be saved
	// by using flat-tail algorithm
	// (passing flatTail equal to the threshold stat below)
	// while achieving the same result.
	Length int `json:"length"`

	// Ranking The sorted ranking of peer indices.
	// Peers not found here have zero global trust.
	Ranking []int `json:"ranking"`

	// Threshold The suggested minimum threshold parameter (flatTail).
	// It is determined from false flat tails observed.
	// Example: If a ranking pattern ABCDDEEEEFFFFFFFFFF was observed
	// (each letter is a distinct ranking) before epsilon was reached,
	// both DD and EEEE are false flat tails
	// of length 1 and 3 respectively.
	// In this case, Threshold=4 is suggested in order to ignore
	// these false flat tails.
	Threshold int `json:"threshold"`
}

// InlineLocalTrust Refers to a local trust matrix "inline".
//
// Instead of pointing (referencing) to an externally stored local trust,
// it carries the contents of the local trust matrix
// within the reference object itself.
type InlineLocalTrust struct {
	// Entries Contains the non-zero entries in the local trust matrix.
	//
	// Truster/trustee pairs missing here are assigned zero direct trust,
	// i.e. no trust relationship.
	Entries []InlineLocalTrustEntry `json:"entries"`

	// Scheme A fixed string `"inline"` to denote an inline reference.
	Scheme InlineLocalTrustScheme `json:"scheme"`

	// Size Denotes the number of peers in the local trust,
	// i.e. its square dimension.
	Size int `json:"size"`
}

// InlineLocalTrustScheme A fixed string `"inline"` to denote an inline reference.
type InlineLocalTrustScheme string

// InlineLocalTrustEntry Represents an entry in the local trust matrix.
//
// Denotes that one peer (`i`) places a direct trust in another peer (`j`)
// by a specific amount (`v`).
type InlineLocalTrustEntry struct {
	// I Denotes the trusting peer.
	//
	// It is a zero-based index,
	// and must be less than the size (dimension)
	// of the enclosing local trust matrix.
	I int `json:"i"`

	// J Denotes the trusted peer.
	//
	// It is a zero-based index,
	// and must be less than the size (dimension)
	// of the enclosing local trust matrix.
	J int `json:"j"`

	// V Represents the (positive) amount of trust
	// placed by peer `i` in peer `j`.
	V float64 `json:"v"`
}

// InlineTrustVector Refers to a trust vector "inline".
//
// Instead of pointing (referencing) to an externally stored trust vector,
// it carries the contents of the trust vector
// within the reference object itself.
type InlineTrustVector struct {
	// Entries Contains the non-zero entries in the trust vector.
	//
	// Peers missing here are assigned zero amount of trust.
	Entries []InlineTrustVectorEntry `json:"entries"`

	// Scheme A fixed string `"inline"` to denote an inline reference.
	Scheme InlineTrustVectorScheme `json:"scheme"`

	// Size Denotes the number of peers in the trust vector, i.e. its length.
	Size int `json:"size"`
}

// InlineTrustVectorScheme A fixed string `"inline"` to denote an inline reference.
type InlineTrustVectorScheme string

// InlineTrustVectorEntry Represents an entry in the local trust matrix.
//
// Denotes that a trust is placed in a peer (`i`)
// by a specific amount (`v`).
type InlineTrustVectorEntry struct {
	// I Denotes the peer.
	//
	// It is a zero-based index,
	// and must be less than the length of the enclosing trust vector.
	I int `json:"i"`

	// V Represents the (positive) amount of trust placed in peer `i`.
	V float64 `json:"v"`
}

// LocalTrustRef refers to a local trust.
type LocalTrustRef struct {
	union json.RawMessage
}

// TrustVectorRef Refers to a trust vector.
type TrustVectorRef struct {
	union json.RawMessage
}

// ComputeWithStatsResponseOK defines model for ComputeWithStatsResponseOK.
type ComputeWithStatsResponseOK struct {
	// EigenTrust Refers to a trust vector.
	EigenTrust TrustVectorRef `json:"eigenTrust"`

	// FlatTailStats Flat-tail algorithm stats and peer ranking.
	FlatTailStats FlatTailStats `json:"flatTailStats"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Message Describes the error in a human-readable message.
	//
	// It may be empty.
	Message string `json:"message"`
}

// ComputeRequestBody defines model for ComputeRequestBody.
type ComputeRequestBody struct {
	Alpha   *float64 `json:"alpha,omitempty"`
	Epsilon *float64 `json:"epsilon,omitempty"`

	// FlatTail The length of the flat tail
	// (ranking unchanged from previous iteration)
	// that must be seen before terminating the recursion.
	// 0 means a flat tail need not be seen,
	// and the recursion is terminated solely based upon epsilon.
	FlatTail *int `json:"flatTail,omitempty"`

	// LocalTrust refers to a local trust.
	LocalTrust LocalTrustRef `json:"localTrust"`

	// NumLeaders The number of top-ranking peers to consider
	// for the purpose of flat-tail algorithm.  0 means everyone.
	NumLeaders *int `json:"numLeaders,omitempty"`

	// PreTrust Refers to a trust vector.
	PreTrust *TrustVectorRef `json:"preTrust,omitempty"`
}

// ComputeJSONBody defines parameters for Compute.
type ComputeJSONBody struct {
	Alpha   *float64 `json:"alpha,omitempty"`
	Epsilon *float64 `json:"epsilon,omitempty"`

	// FlatTail The length of the flat tail
	// (ranking unchanged from previous iteration)
	// that must be seen before terminating the recursion.
	// 0 means a flat tail need not be seen,
	// and the recursion is terminated solely based upon epsilon.
	FlatTail *int `json:"flatTail,omitempty"`

	// LocalTrust refers to a local trust.
	LocalTrust LocalTrustRef `json:"localTrust"`

	// NumLeaders The number of top-ranking peers to consider
	// for the purpose of flat-tail algorithm.  0 means everyone.
	NumLeaders *int `json:"numLeaders,omitempty"`

	// PreTrust Refers to a trust vector.
	PreTrust *TrustVectorRef `json:"preTrust,omitempty"`
}

// ComputeWithStatsJSONBody defines parameters for ComputeWithStats.
type ComputeWithStatsJSONBody struct {
	Alpha   *float64 `json:"alpha,omitempty"`
	Epsilon *float64 `json:"epsilon,omitempty"`

	// FlatTail The length of the flat tail
	// (ranking unchanged from previous iteration)
	// that must be seen before terminating the recursion.
	// 0 means a flat tail need not be seen,
	// and the recursion is terminated solely based upon epsilon.
	FlatTail *int `json:"flatTail,omitempty"`

	// LocalTrust refers to a local trust.
	LocalTrust LocalTrustRef `json:"localTrust"`

	// NumLeaders The number of top-ranking peers to consider
	// for the purpose of flat-tail algorithm.  0 means everyone.
	NumLeaders *int `json:"numLeaders,omitempty"`

	// PreTrust Refers to a trust vector.
	PreTrust *TrustVectorRef `json:"preTrust,omitempty"`
}

// ComputeJSONRequestBody defines body for Compute for application/json ContentType.
type ComputeJSONRequestBody ComputeJSONBody

// ComputeWithStatsJSONRequestBody defines body for ComputeWithStats for application/json ContentType.
type ComputeWithStatsJSONRequestBody ComputeWithStatsJSONBody

// AsInlineLocalTrust returns the union data inside the LocalTrustRef as a InlineLocalTrust
func (t LocalTrustRef) AsInlineLocalTrust() (InlineLocalTrust, error) {
	var body InlineLocalTrust
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineLocalTrust overwrites any union data inside the LocalTrustRef as the provided InlineLocalTrust
func (t *LocalTrustRef) FromInlineLocalTrust(v InlineLocalTrust) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineLocalTrust performs a merge with any union data inside the LocalTrustRef, using the provided InlineLocalTrust
func (t *LocalTrustRef) MergeInlineLocalTrust(v InlineLocalTrust) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t LocalTrustRef) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LocalTrustRef) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInlineTrustVector returns the union data inside the TrustVectorRef as a InlineTrustVector
func (t TrustVectorRef) AsInlineTrustVector() (InlineTrustVector, error) {
	var body InlineTrustVector
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineTrustVector overwrites any union data inside the TrustVectorRef as the provided InlineTrustVector
func (t *TrustVectorRef) FromInlineTrustVector(v InlineTrustVector) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineTrustVector performs a merge with any union data inside the TrustVectorRef, using the provided InlineTrustVector
func (t *TrustVectorRef) MergeInlineTrustVector(v InlineTrustVector) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t TrustVectorRef) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TrustVectorRef) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Compute request with any body
	ComputeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Compute(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ComputeWithStats request with any body
	ComputeWithStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ComputeWithStats(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ComputeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Compute(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComputeWithStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeWithStatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComputeWithStats(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeWithStatsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewComputeRequest calls the generic Compute builder with application/json body
func NewComputeRequest(server string, body ComputeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComputeRequestWithBody(server, "application/json", bodyReader)
}

// NewComputeRequestWithBody generates requests for Compute with any type of body
func NewComputeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewComputeWithStatsRequest calls the generic ComputeWithStats builder with application/json body
func NewComputeWithStatsRequest(server string, body ComputeWithStatsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComputeWithStatsRequestWithBody(server, "application/json", bodyReader)
}

// NewComputeWithStatsRequestWithBody generates requests for ComputeWithStats with any type of body
func NewComputeWithStatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute-with-stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Compute request with any body
	ComputeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeResponse, error)

	ComputeWithResponse(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeResponse, error)

	// ComputeWithStats request with any body
	ComputeWithStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error)

	ComputeWithStatsWithResponse(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error)
}

type ComputeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrustVectorRef
	JSON400      *struct {
		// Message Describes the error in a human-readable message.
		//
		// It may be empty.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r ComputeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComputeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ComputeWithStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// EigenTrust Refers to a trust vector.
		EigenTrust TrustVectorRef `json:"eigenTrust"`

		// FlatTailStats Flat-tail algorithm stats and peer ranking.
		FlatTailStats FlatTailStats `json:"flatTailStats"`
	}
	JSON400 *struct {
		// Message Describes the error in a human-readable message.
		//
		// It may be empty.
		Message string `json:"message"`
	}
}

// Status returns HTTPResponse.Status
func (r ComputeWithStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComputeWithStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ComputeWithBodyWithResponse request with arbitrary body returning *ComputeResponse
func (c *ClientWithResponses) ComputeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeResponse, error) {
	rsp, err := c.ComputeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeResponse(rsp)
}

func (c *ClientWithResponses) ComputeWithResponse(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeResponse, error) {
	rsp, err := c.Compute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeResponse(rsp)
}

// ComputeWithStatsWithBodyWithResponse request with arbitrary body returning *ComputeWithStatsResponse
func (c *ClientWithResponses) ComputeWithStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error) {
	rsp, err := c.ComputeWithStatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeWithStatsResponse(rsp)
}

func (c *ClientWithResponses) ComputeWithStatsWithResponse(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error) {
	rsp, err := c.ComputeWithStats(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeWithStatsResponse(rsp)
}

// ParseComputeResponse parses an HTTP response from a ComputeWithResponse call
func ParseComputeResponse(rsp *http.Response) (*ComputeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComputeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrustVectorRef
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Message Describes the error in a human-readable message.
			//
			// It may be empty.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseComputeWithStatsResponse parses an HTTP response from a ComputeWithStatsWithResponse call
func ParseComputeWithStatsResponse(rsp *http.Response) (*ComputeWithStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComputeWithStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// EigenTrust Refers to a trust vector.
			EigenTrust TrustVectorRef `json:"eigenTrust"`

			// FlatTailStats Flat-tail algorithm stats and peer ranking.
			FlatTailStats FlatTailStats `json:"flatTailStats"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Message Describes the error in a human-readable message.
			//
			// It may be empty.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Compute EigenTrust scores
	// (POST /compute)
	Compute(ctx echo.Context) error
	// Compute EigenTrust scores, with execution statistics
	// (POST /compute-with-stats)
	ComputeWithStats(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Compute converts echo context to params.
func (w *ServerInterfaceWrapper) Compute(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Compute(ctx)
	return err
}

// ComputeWithStats converts echo context to params.
func (w *ServerInterfaceWrapper) ComputeWithStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComputeWithStats(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/compute", wrapper.Compute)
	router.POST(baseURL+"/compute-with-stats", wrapper.ComputeWithStats)

}

type ComputeWithStatsResponseOKJSONResponse struct {
	// EigenTrust Refers to a trust vector.
	EigenTrust TrustVectorRef `json:"eigenTrust"`

	// FlatTailStats Flat-tail algorithm stats and peer ranking.
	FlatTailStats FlatTailStats `json:"flatTailStats"`
}

type InvalidRequestJSONResponse struct {
	// Message Describes the error in a human-readable message.
	//
	// It may be empty.
	Message string `json:"message"`
}

type ComputeRequestObject struct {
	Body *ComputeJSONRequestBody
}

type ComputeResponseObject interface {
	VisitComputeResponse(w http.ResponseWriter) error
}

type Compute200JSONResponse TrustVectorRef

func (response Compute200JSONResponse) VisitComputeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.union)
}

type Compute400JSONResponse struct{ InvalidRequestJSONResponse }

func (response Compute400JSONResponse) VisitComputeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ComputeWithStatsRequestObject struct {
	Body *ComputeWithStatsJSONRequestBody
}

type ComputeWithStatsResponseObject interface {
	VisitComputeWithStatsResponse(w http.ResponseWriter) error
}

type ComputeWithStats200JSONResponse struct {
	ComputeWithStatsResponseOKJSONResponse
}

func (response ComputeWithStats200JSONResponse) VisitComputeWithStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ComputeWithStats400JSONResponse struct{ InvalidRequestJSONResponse }

func (response ComputeWithStats400JSONResponse) VisitComputeWithStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Compute EigenTrust scores
	// (POST /compute)
	Compute(ctx context.Context, request ComputeRequestObject) (ComputeResponseObject, error)
	// Compute EigenTrust scores, with execution statistics
	// (POST /compute-with-stats)
	ComputeWithStats(ctx context.Context, request ComputeWithStatsRequestObject) (ComputeWithStatsResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Compute operation middleware
func (sh *strictHandler) Compute(ctx echo.Context) error {
	var request ComputeRequestObject

	var body ComputeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Compute(ctx.Request().Context(), request.(ComputeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Compute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ComputeResponseObject); ok {
		return validResponse.VisitComputeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ComputeWithStats operation middleware
func (sh *strictHandler) ComputeWithStats(ctx echo.Context) error {
	var request ComputeWithStatsRequestObject

	var body ComputeWithStatsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ComputeWithStats(ctx.Request().Context(), request.(ComputeWithStatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ComputeWithStats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ComputeWithStatsResponseObject); ok {
		return validResponse.VisitComputeWithStatsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"uHOmMQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
