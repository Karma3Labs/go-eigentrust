// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Defines values for TrustRefScheme.
const (
	Inline        TrustRefScheme = "inline"
	Objectstorage TrustRefScheme = "objectstorage"
	Stored        TrustRefScheme = "stored"
)

// ComputeParams defines model for ComputeParams.
type ComputeParams struct {
	Alpha *float64 `json:"alpha,omitempty"`

	// CheckFreq If given (n), exit criteria are checked every n iterations.
	// It can be used in conjunction with minIterations
	// for "modulo n" behavior,
	// e.g. with minIterations=7 and checkFreq=5
	// exit criteria are checked after 7/12/17/... iterations.
	// Default is 1: exit criteria are checked after every iteration.
	CheckFreq *int     `json:"checkFreq,omitempty"`
	Epsilon   *float64 `json:"epsilon,omitempty"`

	// FlatTail The length of the flat tail
	// (ranking unchanged from previous iteration)
	// that must be seen before terminating the recursion.
	// 0 means a flat tail need not be seen,
	// and the recursion is terminated solely based upon epsilon.
	FlatTail *int `json:"flatTail,omitempty"`

	// InitialTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	InitialTrust *TrustRef `json:"initialTrust,omitempty"`

	// LocalTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	LocalTrust TrustRef `json:"localTrust"`

	// MaxIterations The maximum number of iterations after which to stop
	// even if other termination criteria are not met.
	// 0 means no limit.
	MaxIterations *int `json:"maxIterations,omitempty"`

	// MinIterations The minimum number of iterations to perform
	// even if other termination criteria are met.
	// Defaults to checkFreq, which in turn defaults to 1.
	MinIterations *int `json:"minIterations,omitempty"`

	// NumLeaders The number of top-ranking peers to consider
	// for the purpose of flat-tail algorithm.  0 means everyone.
	NumLeaders *int `json:"numLeaders,omitempty"`

	// PreTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	PreTrust *TrustRef `json:"preTrust,omitempty"`
}

// ComputeRequestBody defines model for ComputeRequestBody.
type ComputeRequestBody struct {
	Alpha *float64 `json:"alpha,omitempty"`

	// CheckFreq If given (n), exit criteria are checked every n iterations.
	// It can be used in conjunction with minIterations
	// for "modulo n" behavior,
	// e.g. with minIterations=7 and checkFreq=5
	// exit criteria are checked after 7/12/17/... iterations.
	// Default is 1: exit criteria are checked after every iteration.
	CheckFreq *int `json:"checkFreq,omitempty"`

	// EffectiveInitialTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	EffectiveInitialTrust *TrustRef `json:"effectiveInitialTrust,omitempty"`

	// EffectiveLocalTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	EffectiveLocalTrust *TrustRef `json:"effectiveLocalTrust,omitempty"`

	// EffectivePreTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	EffectivePreTrust *TrustRef `json:"effectivePreTrust,omitempty"`
	Epsilon           *float64  `json:"epsilon,omitempty"`

	// FlatTail The length of the flat tail
	// (ranking unchanged from previous iteration)
	// that must be seen before terminating the recursion.
	// 0 means a flat tail need not be seen,
	// and the recursion is terminated solely based upon epsilon.
	FlatTail *int `json:"flatTail,omitempty"`

	// GlobalTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	GlobalTrust *TrustRef `json:"globalTrust,omitempty"`

	// InitialTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	InitialTrust *TrustRef `json:"initialTrust,omitempty"`

	// LocalTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	LocalTrust TrustRef `json:"localTrust"`

	// MaxIterations The maximum number of iterations after which to stop
	// even if other termination criteria are not met.
	// 0 means no limit.
	MaxIterations *int `json:"maxIterations,omitempty"`

	// MinIterations The minimum number of iterations to perform
	// even if other termination criteria are met.
	// Defaults to checkFreq, which in turn defaults to 1.
	MinIterations *int `json:"minIterations,omitempty"`

	// NumLeaders The number of top-ranking peers to consider
	// for the purpose of flat-tail algorithm.  0 means everyone.
	NumLeaders *int `json:"numLeaders,omitempty"`

	// PreTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	PreTrust *TrustRef `json:"preTrust,omitempty"`
}

// ComputeRequestParams defines model for ComputeRequestParams.
type ComputeRequestParams struct {
	// EffectiveInitialTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	EffectiveInitialTrust *TrustRef `json:"effectiveInitialTrust,omitempty"`

	// EffectiveLocalTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	EffectiveLocalTrust *TrustRef `json:"effectiveLocalTrust,omitempty"`

	// EffectivePreTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	EffectivePreTrust *TrustRef `json:"effectivePreTrust,omitempty"`

	// GlobalTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	GlobalTrust *TrustRef `json:"globalTrust,omitempty"`
}

// ComputeWithStatsResponseOK defines model for ComputeWithStatsResponseOK.
type ComputeWithStatsResponseOK struct {
	// EigenTrust A trust collection (matrix/vector).
	//
	// Individual entry values in the collection represent trust levels;
	// the index/-ices – that is, the coordinate/-s – of an entry
	// indicate the peer/-s to which the trust level (value) is bound.
	//
	// The actual nature of this binding between peer/-s and the trust level
	// is up to the context.
	// For example, in a global trust (vector) the entry index denotes
	// the peer to which the trust value is assigned,
	// (the network trusts this peer by the trust level amount;
	// the peer is the "trustee"),
	// while in a column vector of a local trust matrix the entry index denotes
	// the peer from which the inbound trust is originating
	// (the peer is the "truster").
	EigenTrust TrustRef `json:"eigenTrust"`

	// FlatTailStats Flat-tail algorithm stats and peer ranking.
	FlatTailStats FlatTailStats `json:"flatTailStats"`
}

// FlatTailStats Flat-tail algorithm stats and peer ranking.
type FlatTailStats struct {
	// DeltaNorm The d value as of the head of the last flat-tail.
	// This can be used to fine-tune epsilon
	// even when not using flat-tail algorithm.
	DeltaNorm float64 `json:"deltaNorm"`

	// Length The flat-tail length (say, L, then
	// the last L+1 iterations had the same ranking).
	// This is the number of iterations that could be saved
	// by using flat-tail algorithm
	// (passing flatTail equal to the threshold stat below)
	// while achieving the same result.
	Length int `json:"length"`

	// Ranking The sorted ranking of peer indices.
	// Peers not found here have zero global trust.
	Ranking []int `json:"ranking"`

	// Threshold The suggested minimum threshold parameter (flatTail).
	// It is determined from false flat tails observed.
	// Example: If a ranking pattern ABCDDEEEEFFFFFFFFFF was observed
	// (each letter is a distinct ranking) before epsilon was reached,
	// both DD and EEEE are false flat tails
	// of length 1 and 3 respectively.
	// In this case, Threshold=4 is suggested in order to ignore
	// these false flat tails.
	Threshold int `json:"threshold"`
}

// InlineTrustEntry Represents an entry in the trust collection.  Consists of the entry's
// value (`v`) and the index/indices (position) in the collection.
type InlineTrustEntry struct {
	// V Represents the amount of trust bound to the peer/-s
	// indicated by the entry's index/-ices.
	V     float64 `json:"v"`
	union json.RawMessage
}

// InlineTrustRef An inline "reference" to a trust collection.
//
// Instead of pointing (referencing) to an externally stored collection,
// it carries the contents (individual sparse entries) of the collection
// within the reference object itself.
type InlineTrustRef struct {
	// Entries Contains the non-zero entries in the trust collection.
	Entries []InlineTrustEntry `json:"entries"`

	// Size Denotes the number of peers in the trust collection,
	// i.e. its dimension.
	Size int `json:"size"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Message Describes the error in a human-readable message.
	//
	// It may be empty.
	Message string `json:"message"`
}

// ObjectStorageTrustRef Refers to a trust collection in a remote object storage service.
type ObjectStorageTrustRef struct {
	// Url URL of the trust collection file.
	//
	// It must refer to a CSV file,
	// with three columns `i`, `j`, and `v` (for trust matrix)
	// or two columns `i` and `v` (for trust vector).
	// Currently the `s3://` URL scheme (AWS S3) is supported.
	Url string `json:"url"`
}

// ServerStatus defines model for ServerStatus.
type ServerStatus struct {
	// Message The server status message.
	Message string `json:"message"`
}

// StoredTrustId An identifier of a stored trust collection (matrix/vector).
//
// It identifies a trust collection within the local server.
type StoredTrustId = string

// StoredTrustRef A trust collection stored on the server and identified with a string.
type StoredTrustRef struct {
	// Id An identifier of a stored trust collection (matrix/vector).
	//
	// It identifies a trust collection within the local server.
	Id StoredTrustId `json:"id"`
}

// TrustMatrixEntryIndices Represents the location (indices) of a trust matrix entry.
type TrustMatrixEntryIndices struct {
	// I The row index.
	I int `json:"i"`

	// J The column index.
	J int `json:"j"`
}

// TrustRef A trust collection (matrix/vector).
//
// Individual entry values in the collection represent trust levels;
// the index/-ices – that is, the coordinate/-s – of an entry
// indicate the peer/-s to which the trust level (value) is bound.
//
// The actual nature of this binding between peer/-s and the trust level
// is up to the context.
// For example, in a global trust (vector) the entry index denotes
// the peer to which the trust value is assigned,
// (the network trusts this peer by the trust level amount;
// the peer is the "trustee"),
// while in a column vector of a local trust matrix the entry index denotes
// the peer from which the inbound trust is originating
// (the peer is the "truster").
type TrustRef struct {
	// Scheme Trust reference scheme, akin to URI scheme.
	Scheme TrustRefScheme `json:"scheme"`
	union  json.RawMessage
}

// TrustRefScheme Trust reference scheme, akin to URI scheme.
type TrustRefScheme string

// TrustVectorEntryIndex Represents the location (index) of a trust vector entry.
type TrustVectorEntryIndex struct {
	// I The index.
	I int `json:"i"`
}

// LocalTrustIdParam An identifier of a stored trust collection (matrix/vector).
//
// It identifies a trust collection within the local server.
type LocalTrustIdParam = StoredTrustId

// ComputeResponseOK A trust collection (matrix/vector).
//
// Individual entry values in the collection represent trust levels;
// the index/-ices – that is, the coordinate/-s – of an entry
// indicate the peer/-s to which the trust level (value) is bound.
//
// The actual nature of this binding between peer/-s and the trust level
// is up to the context.
// For example, in a global trust (vector) the entry index denotes
// the peer to which the trust value is assigned,
// (the network trusts this peer by the trust level amount;
// the peer is the "trustee"),
// while in a column vector of a local trust matrix the entry index denotes
// the peer from which the inbound trust is originating
// (the peer is the "truster").
type ComputeResponseOK = TrustRef

// LocalTrustGetResponseOK An inline "reference" to a trust collection.
//
// Instead of pointing (referencing) to an externally stored collection,
// it carries the contents (individual sparse entries) of the collection
// within the reference object itself.
type LocalTrustGetResponseOK = InlineTrustRef

// ServerNotReady defines model for ServerNotReady.
type ServerNotReady = ServerStatus

// ServerReady defines model for ServerReady.
type ServerReady = ServerStatus

// UpdateLocalTrustParams defines parameters for UpdateLocalTrust.
type UpdateLocalTrustParams struct {
	// Merge Controls behavior if a local trust exists under the same ID.
	//
	// If false (default), the local trust ref contents replaces
	// the existing one under the same ID, if any.
	// If true, the local trust ref contents are merged
	// into the existing one under the same ID.
	Merge *bool `form:"merge,omitempty" json:"merge,omitempty"`
}

// ComputeJSONRequestBody defines body for Compute for application/json ContentType.
type ComputeJSONRequestBody = ComputeRequestBody

// ComputeWithStatsJSONRequestBody defines body for ComputeWithStats for application/json ContentType.
type ComputeWithStatsJSONRequestBody = ComputeRequestBody

// UpdateLocalTrustJSONRequestBody defines body for UpdateLocalTrust for application/json ContentType.
type UpdateLocalTrustJSONRequestBody = TrustRef

// AsTrustMatrixEntryIndices returns the union data inside the InlineTrustEntry as a TrustMatrixEntryIndices
func (t InlineTrustEntry) AsTrustMatrixEntryIndices() (TrustMatrixEntryIndices, error) {
	var body TrustMatrixEntryIndices
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustMatrixEntryIndices overwrites any union data inside the InlineTrustEntry as the provided TrustMatrixEntryIndices
func (t *InlineTrustEntry) FromTrustMatrixEntryIndices(v TrustMatrixEntryIndices) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustMatrixEntryIndices performs a merge with any union data inside the InlineTrustEntry, using the provided TrustMatrixEntryIndices
func (t *InlineTrustEntry) MergeTrustMatrixEntryIndices(v TrustMatrixEntryIndices) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTrustVectorEntryIndex returns the union data inside the InlineTrustEntry as a TrustVectorEntryIndex
func (t InlineTrustEntry) AsTrustVectorEntryIndex() (TrustVectorEntryIndex, error) {
	var body TrustVectorEntryIndex
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrustVectorEntryIndex overwrites any union data inside the InlineTrustEntry as the provided TrustVectorEntryIndex
func (t *InlineTrustEntry) FromTrustVectorEntryIndex(v TrustVectorEntryIndex) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrustVectorEntryIndex performs a merge with any union data inside the InlineTrustEntry, using the provided TrustVectorEntryIndex
func (t *InlineTrustEntry) MergeTrustVectorEntryIndex(v TrustVectorEntryIndex) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InlineTrustEntry) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["v"], err = json.Marshal(t.V)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'v': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *InlineTrustEntry) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["v"]; found {
		err = json.Unmarshal(raw, &t.V)
		if err != nil {
			return fmt.Errorf("error reading 'v': %w", err)
		}
	}

	return err
}

// AsInlineTrustRef returns the union data inside the TrustRef as a InlineTrustRef
func (t TrustRef) AsInlineTrustRef() (InlineTrustRef, error) {
	var body InlineTrustRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineTrustRef overwrites any union data inside the TrustRef as the provided InlineTrustRef
func (t *TrustRef) FromInlineTrustRef(v InlineTrustRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineTrustRef performs a merge with any union data inside the TrustRef, using the provided InlineTrustRef
func (t *TrustRef) MergeInlineTrustRef(v InlineTrustRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStoredTrustRef returns the union data inside the TrustRef as a StoredTrustRef
func (t TrustRef) AsStoredTrustRef() (StoredTrustRef, error) {
	var body StoredTrustRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStoredTrustRef overwrites any union data inside the TrustRef as the provided StoredTrustRef
func (t *TrustRef) FromStoredTrustRef(v StoredTrustRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStoredTrustRef performs a merge with any union data inside the TrustRef, using the provided StoredTrustRef
func (t *TrustRef) MergeStoredTrustRef(v StoredTrustRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsObjectStorageTrustRef returns the union data inside the TrustRef as a ObjectStorageTrustRef
func (t TrustRef) AsObjectStorageTrustRef() (ObjectStorageTrustRef, error) {
	var body ObjectStorageTrustRef
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObjectStorageTrustRef overwrites any union data inside the TrustRef as the provided ObjectStorageTrustRef
func (t *TrustRef) FromObjectStorageTrustRef(v ObjectStorageTrustRef) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObjectStorageTrustRef performs a merge with any union data inside the TrustRef, using the provided ObjectStorageTrustRef
func (t *TrustRef) MergeObjectStorageTrustRef(v ObjectStorageTrustRef) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TrustRef) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["scheme"], err = json.Marshal(t.Scheme)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'scheme': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *TrustRef) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["scheme"]; found {
		err = json.Unmarshal(raw, &t.Scheme)
		if err != nil {
			return fmt.Errorf("error reading 'scheme': %w", err)
		}
	}

	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ComputeWithBody request with any body
	ComputeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Compute(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ComputeWithStatsWithBody request with any body
	ComputeWithStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ComputeWithStats(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLocalTrust request
	DeleteLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocalTrust request
	GetLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadLocalTrust request
	HeadLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateLocalTrustWithBody request with any body
	UpdateLocalTrustWithBody(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateLocalTrust(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, body UpdateLocalTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ComputeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Compute(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComputeWithStatsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeWithStatsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ComputeWithStats(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewComputeWithStatsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLocalTrustRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocalTrustRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadLocalTrust(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadLocalTrustRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLocalTrustWithBody(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLocalTrustRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLocalTrust(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, body UpdateLocalTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLocalTrustRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewComputeRequest calls the generic Compute builder with application/json body
func NewComputeRequest(server string, body ComputeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComputeRequestWithBody(server, "application/json", bodyReader)
}

// NewComputeRequestWithBody generates requests for Compute with any type of body
func NewComputeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewComputeWithStatsRequest calls the generic ComputeWithStats builder with application/json body
func NewComputeWithStatsRequest(server string, body ComputeWithStatsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewComputeWithStatsRequestWithBody(server, "application/json", bodyReader)
}

// NewComputeWithStatsRequestWithBody generates requests for ComputeWithStats with any type of body
func NewComputeWithStatsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute-with-stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLocalTrustRequest generates requests for DeleteLocalTrust
func NewDeleteLocalTrustRequest(server string, id LocalTrustIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/local-trust/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocalTrustRequest generates requests for GetLocalTrust
func NewGetLocalTrustRequest(server string, id LocalTrustIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/local-trust/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadLocalTrustRequest generates requests for HeadLocalTrust
func NewHeadLocalTrustRequest(server string, id LocalTrustIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/local-trust/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateLocalTrustRequest calls the generic UpdateLocalTrust builder with application/json body
func NewUpdateLocalTrustRequest(server string, id LocalTrustIdParam, params *UpdateLocalTrustParams, body UpdateLocalTrustJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLocalTrustRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewUpdateLocalTrustRequestWithBody generates requests for UpdateLocalTrust with any type of body
func NewUpdateLocalTrustRequestWithBody(server string, id LocalTrustIdParam, params *UpdateLocalTrustParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/local-trust/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Merge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "merge", runtime.ParamLocationQuery, *params.Merge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ComputeWithBodyWithResponse request with any body
	ComputeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeResponse, error)

	ComputeWithResponse(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeResponse, error)

	// ComputeWithStatsWithBodyWithResponse request with any body
	ComputeWithStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error)

	ComputeWithStatsWithResponse(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error)

	// DeleteLocalTrustWithResponse request
	DeleteLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*DeleteLocalTrustResponse, error)

	// GetLocalTrustWithResponse request
	GetLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*GetLocalTrustResponse, error)

	// HeadLocalTrustWithResponse request
	HeadLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*HeadLocalTrustResponse, error)

	// UpdateLocalTrustWithBodyWithResponse request with any body
	UpdateLocalTrustWithBodyWithResponse(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLocalTrustResponse, error)

	UpdateLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, body UpdateLocalTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLocalTrustResponse, error)

	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)
}

type ComputeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputeResponseOK
	JSON400      *InvalidRequest
}

// Status returns HTTPResponse.Status
func (r ComputeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComputeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ComputeWithStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComputeWithStatsResponseOK
	JSON400      *InvalidRequest
}

// Status returns HTTPResponse.Status
func (r ComputeWithStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ComputeWithStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLocalTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *InvalidRequest
}

// Status returns HTTPResponse.Status
func (r DeleteLocalTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLocalTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocalTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocalTrustGetResponseOK
}

// Status returns HTTPResponse.Status
func (r GetLocalTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocalTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadLocalTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadLocalTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadLocalTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLocalTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *InvalidRequest
}

// Status returns HTTPResponse.Status
func (r UpdateLocalTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLocalTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerReady
	JSON500      *ServerNotReady
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ComputeWithBodyWithResponse request with arbitrary body returning *ComputeResponse
func (c *ClientWithResponses) ComputeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeResponse, error) {
	rsp, err := c.ComputeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeResponse(rsp)
}

func (c *ClientWithResponses) ComputeWithResponse(ctx context.Context, body ComputeJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeResponse, error) {
	rsp, err := c.Compute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeResponse(rsp)
}

// ComputeWithStatsWithBodyWithResponse request with arbitrary body returning *ComputeWithStatsResponse
func (c *ClientWithResponses) ComputeWithStatsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error) {
	rsp, err := c.ComputeWithStatsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeWithStatsResponse(rsp)
}

func (c *ClientWithResponses) ComputeWithStatsWithResponse(ctx context.Context, body ComputeWithStatsJSONRequestBody, reqEditors ...RequestEditorFn) (*ComputeWithStatsResponse, error) {
	rsp, err := c.ComputeWithStats(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseComputeWithStatsResponse(rsp)
}

// DeleteLocalTrustWithResponse request returning *DeleteLocalTrustResponse
func (c *ClientWithResponses) DeleteLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*DeleteLocalTrustResponse, error) {
	rsp, err := c.DeleteLocalTrust(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLocalTrustResponse(rsp)
}

// GetLocalTrustWithResponse request returning *GetLocalTrustResponse
func (c *ClientWithResponses) GetLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*GetLocalTrustResponse, error) {
	rsp, err := c.GetLocalTrust(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocalTrustResponse(rsp)
}

// HeadLocalTrustWithResponse request returning *HeadLocalTrustResponse
func (c *ClientWithResponses) HeadLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, reqEditors ...RequestEditorFn) (*HeadLocalTrustResponse, error) {
	rsp, err := c.HeadLocalTrust(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadLocalTrustResponse(rsp)
}

// UpdateLocalTrustWithBodyWithResponse request with arbitrary body returning *UpdateLocalTrustResponse
func (c *ClientWithResponses) UpdateLocalTrustWithBodyWithResponse(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLocalTrustResponse, error) {
	rsp, err := c.UpdateLocalTrustWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLocalTrustResponse(rsp)
}

func (c *ClientWithResponses) UpdateLocalTrustWithResponse(ctx context.Context, id LocalTrustIdParam, params *UpdateLocalTrustParams, body UpdateLocalTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLocalTrustResponse, error) {
	rsp, err := c.UpdateLocalTrust(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLocalTrustResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// ParseComputeResponse parses an HTTP response from a ComputeWithResponse call
func ParseComputeResponse(rsp *http.Response) (*ComputeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComputeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputeResponseOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseComputeWithStatsResponse parses an HTTP response from a ComputeWithStatsWithResponse call
func ParseComputeWithStatsResponse(rsp *http.Response) (*ComputeWithStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ComputeWithStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComputeWithStatsResponseOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteLocalTrustResponse parses an HTTP response from a DeleteLocalTrustWithResponse call
func ParseDeleteLocalTrustResponse(rsp *http.Response) (*DeleteLocalTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLocalTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetLocalTrustResponse parses an HTTP response from a GetLocalTrustWithResponse call
func ParseGetLocalTrustResponse(rsp *http.Response) (*GetLocalTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocalTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocalTrustGetResponseOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseHeadLocalTrustResponse parses an HTTP response from a HeadLocalTrustWithResponse call
func ParseHeadLocalTrustResponse(rsp *http.Response) (*HeadLocalTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadLocalTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateLocalTrustResponse parses an HTTP response from a UpdateLocalTrustWithResponse call
func ParseUpdateLocalTrustResponse(rsp *http.Response) (*UpdateLocalTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateLocalTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerReady
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerNotReady
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Compute EigenTrust scores
	// (POST /compute)
	Compute(ctx echo.Context) error
	// Compute EigenTrust scores, with execution statistics
	// (POST /compute-with-stats)
	ComputeWithStats(ctx echo.Context) error
	// Delete local trust
	// (DELETE /local-trust/{id})
	DeleteLocalTrust(ctx echo.Context, id LocalTrustIdParam) error
	// Retrieve local trust
	// (GET /local-trust/{id})
	GetLocalTrust(ctx echo.Context, id LocalTrustIdParam) error
	// Check for existence of local trust
	// (HEAD /local-trust/{id})
	HeadLocalTrust(ctx echo.Context, id LocalTrustIdParam) error
	// Update local trust
	// (PUT /local-trust/{id})
	UpdateLocalTrust(ctx echo.Context, id LocalTrustIdParam, params UpdateLocalTrustParams) error
	// Get the health check status
	// (GET /status)
	GetStatus(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Compute converts echo context to params.
func (w *ServerInterfaceWrapper) Compute(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Compute(ctx)
	return err
}

// ComputeWithStats converts echo context to params.
func (w *ServerInterfaceWrapper) ComputeWithStats(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ComputeWithStats(ctx)
	return err
}

// DeleteLocalTrust converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLocalTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id LocalTrustIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLocalTrust(ctx, id)
	return err
}

// GetLocalTrust converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id LocalTrustIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalTrust(ctx, id)
	return err
}

// HeadLocalTrust converts echo context to params.
func (w *ServerInterfaceWrapper) HeadLocalTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id LocalTrustIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HeadLocalTrust(ctx, id)
	return err
}

// UpdateLocalTrust converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLocalTrust(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id LocalTrustIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateLocalTrustParams
	// ------------- Optional query parameter "merge" -------------

	err = runtime.BindQueryParameter("form", true, false, "merge", ctx.QueryParams(), &params.Merge)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter merge: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLocalTrust(ctx, id, params)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/compute", wrapper.Compute)
	router.POST(baseURL+"/compute-with-stats", wrapper.ComputeWithStats)
	router.DELETE(baseURL+"/local-trust/:id", wrapper.DeleteLocalTrust)
	router.GET(baseURL+"/local-trust/:id", wrapper.GetLocalTrust)
	router.HEAD(baseURL+"/local-trust/:id", wrapper.HeadLocalTrust)
	router.PUT(baseURL+"/local-trust/:id", wrapper.UpdateLocalTrust)
	router.GET(baseURL+"/status", wrapper.GetStatus)

}

type ComputeResponseOKJSONResponse TrustRef

type ComputeWithStatsResponseOKJSONResponse ComputeWithStatsResponseOK

type InvalidRequestJSONResponse InvalidRequest

type LocalTrustGetResponseOKJSONResponse InlineTrustRef

type ServerNotReadyJSONResponse ServerStatus

type ServerReadyJSONResponse ServerStatus

type ComputeRequestObject struct {
	Body *ComputeJSONRequestBody
}

type ComputeResponseObject interface {
	VisitComputeResponse(w http.ResponseWriter) error
}

type Compute200JSONResponse struct{ ComputeResponseOKJSONResponse }

func (response Compute200JSONResponse) VisitComputeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.union)
}

type Compute400JSONResponse struct{ InvalidRequestJSONResponse }

func (response Compute400JSONResponse) VisitComputeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ComputeWithStatsRequestObject struct {
	Body *ComputeWithStatsJSONRequestBody
}

type ComputeWithStatsResponseObject interface {
	VisitComputeWithStatsResponse(w http.ResponseWriter) error
}

type ComputeWithStats200JSONResponse struct {
	ComputeWithStatsResponseOKJSONResponse
}

func (response ComputeWithStats200JSONResponse) VisitComputeWithStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ComputeWithStats400JSONResponse struct{ InvalidRequestJSONResponse }

func (response ComputeWithStats400JSONResponse) VisitComputeWithStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLocalTrustRequestObject struct {
	Id LocalTrustIdParam `json:"id"`
}

type DeleteLocalTrustResponseObject interface {
	VisitDeleteLocalTrustResponse(w http.ResponseWriter) error
}

type DeleteLocalTrust204Response struct {
}

func (response DeleteLocalTrust204Response) VisitDeleteLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteLocalTrust400JSONResponse struct{ InvalidRequestJSONResponse }

func (response DeleteLocalTrust400JSONResponse) VisitDeleteLocalTrustResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLocalTrust404Response struct {
}

func (response DeleteLocalTrust404Response) VisitDeleteLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetLocalTrustRequestObject struct {
	Id LocalTrustIdParam `json:"id"`
}

type GetLocalTrustResponseObject interface {
	VisitGetLocalTrustResponse(w http.ResponseWriter) error
}

type GetLocalTrust200JSONResponse struct {
	LocalTrustGetResponseOKJSONResponse
}

func (response GetLocalTrust200JSONResponse) VisitGetLocalTrustResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLocalTrust404Response struct {
}

func (response GetLocalTrust404Response) VisitGetLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type HeadLocalTrustRequestObject struct {
	Id LocalTrustIdParam `json:"id"`
}

type HeadLocalTrustResponseObject interface {
	VisitHeadLocalTrustResponse(w http.ResponseWriter) error
}

type HeadLocalTrust204Response struct {
}

func (response HeadLocalTrust204Response) VisitHeadLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type HeadLocalTrust404Response struct {
}

func (response HeadLocalTrust404Response) VisitHeadLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateLocalTrustRequestObject struct {
	Id     LocalTrustIdParam `json:"id"`
	Params UpdateLocalTrustParams
	Body   *UpdateLocalTrustJSONRequestBody
}

type UpdateLocalTrustResponseObject interface {
	VisitUpdateLocalTrustResponse(w http.ResponseWriter) error
}

type UpdateLocalTrust200Response struct {
}

func (response UpdateLocalTrust200Response) VisitUpdateLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateLocalTrust201Response struct {
}

func (response UpdateLocalTrust201Response) VisitUpdateLocalTrustResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type UpdateLocalTrust400JSONResponse struct{ InvalidRequestJSONResponse }

func (response UpdateLocalTrust400JSONResponse) VisitUpdateLocalTrustResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetStatusRequestObject struct {
}

type GetStatusResponseObject interface {
	VisitGetStatusResponse(w http.ResponseWriter) error
}

type GetStatus200JSONResponse struct{ ServerReadyJSONResponse }

func (response GetStatus200JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStatus500JSONResponse struct{ ServerNotReadyJSONResponse }

func (response GetStatus500JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Compute EigenTrust scores
	// (POST /compute)
	Compute(ctx context.Context, request ComputeRequestObject) (ComputeResponseObject, error)
	// Compute EigenTrust scores, with execution statistics
	// (POST /compute-with-stats)
	ComputeWithStats(ctx context.Context, request ComputeWithStatsRequestObject) (ComputeWithStatsResponseObject, error)
	// Delete local trust
	// (DELETE /local-trust/{id})
	DeleteLocalTrust(ctx context.Context, request DeleteLocalTrustRequestObject) (DeleteLocalTrustResponseObject, error)
	// Retrieve local trust
	// (GET /local-trust/{id})
	GetLocalTrust(ctx context.Context, request GetLocalTrustRequestObject) (GetLocalTrustResponseObject, error)
	// Check for existence of local trust
	// (HEAD /local-trust/{id})
	HeadLocalTrust(ctx context.Context, request HeadLocalTrustRequestObject) (HeadLocalTrustResponseObject, error)
	// Update local trust
	// (PUT /local-trust/{id})
	UpdateLocalTrust(ctx context.Context, request UpdateLocalTrustRequestObject) (UpdateLocalTrustResponseObject, error)
	// Get the health check status
	// (GET /status)
	GetStatus(ctx context.Context, request GetStatusRequestObject) (GetStatusResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Compute operation middleware
func (sh *strictHandler) Compute(ctx echo.Context) error {
	var request ComputeRequestObject

	var body ComputeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Compute(ctx.Request().Context(), request.(ComputeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Compute")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ComputeResponseObject); ok {
		return validResponse.VisitComputeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ComputeWithStats operation middleware
func (sh *strictHandler) ComputeWithStats(ctx echo.Context) error {
	var request ComputeWithStatsRequestObject

	var body ComputeWithStatsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ComputeWithStats(ctx.Request().Context(), request.(ComputeWithStatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ComputeWithStats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ComputeWithStatsResponseObject); ok {
		return validResponse.VisitComputeWithStatsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteLocalTrust operation middleware
func (sh *strictHandler) DeleteLocalTrust(ctx echo.Context, id LocalTrustIdParam) error {
	var request DeleteLocalTrustRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLocalTrust(ctx.Request().Context(), request.(DeleteLocalTrustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLocalTrust")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteLocalTrustResponseObject); ok {
		return validResponse.VisitDeleteLocalTrustResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetLocalTrust operation middleware
func (sh *strictHandler) GetLocalTrust(ctx echo.Context, id LocalTrustIdParam) error {
	var request GetLocalTrustRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLocalTrust(ctx.Request().Context(), request.(GetLocalTrustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLocalTrust")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetLocalTrustResponseObject); ok {
		return validResponse.VisitGetLocalTrustResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// HeadLocalTrust operation middleware
func (sh *strictHandler) HeadLocalTrust(ctx echo.Context, id LocalTrustIdParam) error {
	var request HeadLocalTrustRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HeadLocalTrust(ctx.Request().Context(), request.(HeadLocalTrustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HeadLocalTrust")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HeadLocalTrustResponseObject); ok {
		return validResponse.VisitHeadLocalTrustResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateLocalTrust operation middleware
func (sh *strictHandler) UpdateLocalTrust(ctx echo.Context, id LocalTrustIdParam, params UpdateLocalTrustParams) error {
	var request UpdateLocalTrustRequestObject

	request.Id = id
	request.Params = params

	var body UpdateLocalTrustJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLocalTrust(ctx.Request().Context(), request.(UpdateLocalTrustRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLocalTrust")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateLocalTrustResponseObject); ok {
		return validResponse.VisitUpdateLocalTrustResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetStatus operation middleware
func (sh *strictHandler) GetStatus(ctx echo.Context) error {
	var request GetStatusRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStatus(ctx.Request().Context(), request.(GetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetStatusResponseObject); ok {
		return validResponse.VisitGetStatusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"40YAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
