// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// DeleteLocalTrustParams is parameters of deleteLocalTrust operation.
type DeleteLocalTrustParams struct {
	// `id` denotes the local trust collection in question.
	ID StoredTrustId
}

func unpackDeleteLocalTrustParams(packed middleware.Parameters) (params DeleteLocalTrustParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(StoredTrustId)
	}
	return params
}

func decodeDeleteLocalTrustParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteLocalTrustParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID = StoredTrustId(paramsDotIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetLocalTrustParams is parameters of getLocalTrust operation.
type GetLocalTrustParams struct {
	// `id` denotes the local trust collection in question.
	ID StoredTrustId
}

func unpackGetLocalTrustParams(packed middleware.Parameters) (params GetLocalTrustParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(StoredTrustId)
	}
	return params
}

func decodeGetLocalTrustParams(args [1]string, argsEscaped bool, r *http.Request) (params GetLocalTrustParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID = StoredTrustId(paramsDotIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// HeadLocalTrustParams is parameters of headLocalTrust operation.
type HeadLocalTrustParams struct {
	// `id` denotes the local trust collection in question.
	ID StoredTrustId
}

func unpackHeadLocalTrustParams(packed middleware.Parameters) (params HeadLocalTrustParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(StoredTrustId)
	}
	return params
}

func decodeHeadLocalTrustParams(args [1]string, argsEscaped bool, r *http.Request) (params HeadLocalTrustParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID = StoredTrustId(paramsDotIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateLocalTrustParams is parameters of updateLocalTrust operation.
type UpdateLocalTrustParams struct {
	// `id` denotes the local trust collection in question.
	ID StoredTrustId
	// Controls behavior if a local trust exists under the same ID.
	// If false (default), the local trust ref contents replaces
	// the existing one under the same ID, if any.
	// If true, the local trust ref contents are merged
	// into the existing one under the same ID.
	Merge OptBool
}

func unpackUpdateLocalTrustParams(packed middleware.Parameters) (params UpdateLocalTrustParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(StoredTrustId)
	}
	{
		key := middleware.ParameterKey{
			Name: "merge",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Merge = v.(OptBool)
		}
	}
	return params
}

func decodeUpdateLocalTrustParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateLocalTrustParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID = StoredTrustId(paramsDotIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: merge.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "merge",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMergeVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotMergeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Merge.SetTo(paramsDotMergeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "merge",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
