// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"github.com/go-faster/errors"
)

// Merged schema.
// Ref: #/components/schemas/ComputeRequestBody
type ComputeRequestBody struct {
	LocalTrust   TrustRef    `json:"localTrust"`
	InitialTrust OptTrustRef `json:"initialTrust"`
	PreTrust     OptTrustRef `json:"preTrust"`
	Alpha        OptFloat64  `json:"alpha"`
	Epsilon      OptFloat64  `json:"epsilon"`
	// The length of the flat tail
	// (ranking unchanged from previous iteration)
	// that must be seen before terminating the recursion.
	// 0 means a flat tail need not be seen,
	// and the recursion is terminated solely based upon epsilon.
	FlatTail OptInt `json:"flatTail"`
	// The number of top-ranking peers to consider
	// for the purpose of flat-tail algorithm.  0 means everyone.
	NumLeaders OptInt `json:"numLeaders"`
	// The maximum number of iterations after which to stop
	// even if other termination criteria are not met.
	// 0 means no limit.
	MaxIterations OptInt `json:"maxIterations"`
	// The minimum number of iterations to perform
	// even if other termination criteria are met.
	// Defaults to checkFreq, which in turn defaults to 1.
	MinIterations OptInt `json:"minIterations"`
	// If given (n), exit criteria are checked every n iterations.
	// It can be used in conjunction with minIterations
	// for "modulo n" behavior,
	// e.g. with minIterations=7 and checkFreq=5
	// exit criteria are checked after 7/12/17/... iterations.
	// Default is 1: exit criteria are checked after every iteration.
	CheckFreq OptInt `json:"checkFreq"`
	// Where to store the compute result.
	// If not given, return inline.
	GlobalTrust OptTrustRef `json:"globalTrust"`
	// Where to store the effective local trust used for compute.
	// This is the local trust after canonicalization
	// and pre-trust substitution (for peers without outbound trust).
	EffectiveLocalTrust OptTrustRef `json:"effectiveLocalTrust"`
	// Where to store the effective pre-trust used for compute.
	EffectivePreTrust OptTrustRef `json:"effectivePreTrust"`
	// Where to store the effective initial trust used for compute.
	EffectiveInitialTrust OptTrustRef `json:"effectiveInitialTrust"`
}

// GetLocalTrust returns the value of LocalTrust.
func (s *ComputeRequestBody) GetLocalTrust() TrustRef {
	return s.LocalTrust
}

// GetInitialTrust returns the value of InitialTrust.
func (s *ComputeRequestBody) GetInitialTrust() OptTrustRef {
	return s.InitialTrust
}

// GetPreTrust returns the value of PreTrust.
func (s *ComputeRequestBody) GetPreTrust() OptTrustRef {
	return s.PreTrust
}

// GetAlpha returns the value of Alpha.
func (s *ComputeRequestBody) GetAlpha() OptFloat64 {
	return s.Alpha
}

// GetEpsilon returns the value of Epsilon.
func (s *ComputeRequestBody) GetEpsilon() OptFloat64 {
	return s.Epsilon
}

// GetFlatTail returns the value of FlatTail.
func (s *ComputeRequestBody) GetFlatTail() OptInt {
	return s.FlatTail
}

// GetNumLeaders returns the value of NumLeaders.
func (s *ComputeRequestBody) GetNumLeaders() OptInt {
	return s.NumLeaders
}

// GetMaxIterations returns the value of MaxIterations.
func (s *ComputeRequestBody) GetMaxIterations() OptInt {
	return s.MaxIterations
}

// GetMinIterations returns the value of MinIterations.
func (s *ComputeRequestBody) GetMinIterations() OptInt {
	return s.MinIterations
}

// GetCheckFreq returns the value of CheckFreq.
func (s *ComputeRequestBody) GetCheckFreq() OptInt {
	return s.CheckFreq
}

// GetGlobalTrust returns the value of GlobalTrust.
func (s *ComputeRequestBody) GetGlobalTrust() OptTrustRef {
	return s.GlobalTrust
}

// GetEffectiveLocalTrust returns the value of EffectiveLocalTrust.
func (s *ComputeRequestBody) GetEffectiveLocalTrust() OptTrustRef {
	return s.EffectiveLocalTrust
}

// GetEffectivePreTrust returns the value of EffectivePreTrust.
func (s *ComputeRequestBody) GetEffectivePreTrust() OptTrustRef {
	return s.EffectivePreTrust
}

// GetEffectiveInitialTrust returns the value of EffectiveInitialTrust.
func (s *ComputeRequestBody) GetEffectiveInitialTrust() OptTrustRef {
	return s.EffectiveInitialTrust
}

// SetLocalTrust sets the value of LocalTrust.
func (s *ComputeRequestBody) SetLocalTrust(val TrustRef) {
	s.LocalTrust = val
}

// SetInitialTrust sets the value of InitialTrust.
func (s *ComputeRequestBody) SetInitialTrust(val OptTrustRef) {
	s.InitialTrust = val
}

// SetPreTrust sets the value of PreTrust.
func (s *ComputeRequestBody) SetPreTrust(val OptTrustRef) {
	s.PreTrust = val
}

// SetAlpha sets the value of Alpha.
func (s *ComputeRequestBody) SetAlpha(val OptFloat64) {
	s.Alpha = val
}

// SetEpsilon sets the value of Epsilon.
func (s *ComputeRequestBody) SetEpsilon(val OptFloat64) {
	s.Epsilon = val
}

// SetFlatTail sets the value of FlatTail.
func (s *ComputeRequestBody) SetFlatTail(val OptInt) {
	s.FlatTail = val
}

// SetNumLeaders sets the value of NumLeaders.
func (s *ComputeRequestBody) SetNumLeaders(val OptInt) {
	s.NumLeaders = val
}

// SetMaxIterations sets the value of MaxIterations.
func (s *ComputeRequestBody) SetMaxIterations(val OptInt) {
	s.MaxIterations = val
}

// SetMinIterations sets the value of MinIterations.
func (s *ComputeRequestBody) SetMinIterations(val OptInt) {
	s.MinIterations = val
}

// SetCheckFreq sets the value of CheckFreq.
func (s *ComputeRequestBody) SetCheckFreq(val OptInt) {
	s.CheckFreq = val
}

// SetGlobalTrust sets the value of GlobalTrust.
func (s *ComputeRequestBody) SetGlobalTrust(val OptTrustRef) {
	s.GlobalTrust = val
}

// SetEffectiveLocalTrust sets the value of EffectiveLocalTrust.
func (s *ComputeRequestBody) SetEffectiveLocalTrust(val OptTrustRef) {
	s.EffectiveLocalTrust = val
}

// SetEffectivePreTrust sets the value of EffectivePreTrust.
func (s *ComputeRequestBody) SetEffectivePreTrust(val OptTrustRef) {
	s.EffectivePreTrust = val
}

// SetEffectiveInitialTrust sets the value of EffectiveInitialTrust.
func (s *ComputeRequestBody) SetEffectiveInitialTrust(val OptTrustRef) {
	s.EffectiveInitialTrust = val
}

// Ref: #/components/schemas/ComputeWithStatsResponseOK
type ComputeWithStatsResponseOK struct {
	EigenTrust    TrustRef      `json:"eigenTrust"`
	FlatTailStats FlatTailStats `json:"flatTailStats"`
}

// GetEigenTrust returns the value of EigenTrust.
func (s *ComputeWithStatsResponseOK) GetEigenTrust() TrustRef {
	return s.EigenTrust
}

// GetFlatTailStats returns the value of FlatTailStats.
func (s *ComputeWithStatsResponseOK) GetFlatTailStats() FlatTailStats {
	return s.FlatTailStats
}

// SetEigenTrust sets the value of EigenTrust.
func (s *ComputeWithStatsResponseOK) SetEigenTrust(val TrustRef) {
	s.EigenTrust = val
}

// SetFlatTailStats sets the value of FlatTailStats.
func (s *ComputeWithStatsResponseOK) SetFlatTailStats(val FlatTailStats) {
	s.FlatTailStats = val
}

func (*ComputeWithStatsResponseOK) computeWithStatsRes() {}

// DeleteLocalTrustNoContent is response for DeleteLocalTrust operation.
type DeleteLocalTrustNoContent struct{}

func (*DeleteLocalTrustNoContent) deleteLocalTrustRes() {}

// DeleteLocalTrustNotFound is response for DeleteLocalTrust operation.
type DeleteLocalTrustNotFound struct{}

func (*DeleteLocalTrustNotFound) deleteLocalTrustRes() {}

// Flat-tail algorithm stats and peer ranking.
// Ref: #/components/schemas/FlatTailStats
type FlatTailStats struct {
	// The flat-tail length (say, L, then
	// the last L+1 iterations had the same ranking).
	// This is the number of iterations that could be saved
	// by using flat-tail algorithm
	// (passing flatTail equal to the threshold stat below)
	// while achieving the same result.
	Length int `json:"length"`
	// The suggested minimum threshold parameter (flatTail).
	// It is determined from false flat tails observed.
	// Example: If a ranking pattern ABCDDEEEEFFFFFFFFFF was observed
	// (each letter is a distinct ranking) before epsilon was reached,
	// both DD and EEEE are false flat tails
	// of length 1 and 3 respectively.
	// In this case, Threshold=4 is suggested in order to ignore
	// these false flat tails.
	Threshold int `json:"threshold"`
	// The d value as of the head of the last flat-tail.
	// This can be used to fine-tune epsilon
	// even when not using flat-tail algorithm.
	DeltaNorm float64 `json:"deltaNorm"`
	// The sorted ranking of peer indices.
	// Peers not found here have zero global trust.
	Ranking []int `json:"ranking"`
}

// GetLength returns the value of Length.
func (s *FlatTailStats) GetLength() int {
	return s.Length
}

// GetThreshold returns the value of Threshold.
func (s *FlatTailStats) GetThreshold() int {
	return s.Threshold
}

// GetDeltaNorm returns the value of DeltaNorm.
func (s *FlatTailStats) GetDeltaNorm() float64 {
	return s.DeltaNorm
}

// GetRanking returns the value of Ranking.
func (s *FlatTailStats) GetRanking() []int {
	return s.Ranking
}

// SetLength sets the value of Length.
func (s *FlatTailStats) SetLength(val int) {
	s.Length = val
}

// SetThreshold sets the value of Threshold.
func (s *FlatTailStats) SetThreshold(val int) {
	s.Threshold = val
}

// SetDeltaNorm sets the value of DeltaNorm.
func (s *FlatTailStats) SetDeltaNorm(val float64) {
	s.DeltaNorm = val
}

// SetRanking sets the value of Ranking.
func (s *FlatTailStats) SetRanking(val []int) {
	s.Ranking = val
}

// GetLocalTrustNotFound is response for GetLocalTrust operation.
type GetLocalTrustNotFound struct{}

func (*GetLocalTrustNotFound) getLocalTrustRes() {}

type GetStatusInternalServerError ServerStatus

func (*GetStatusInternalServerError) getStatusRes() {}

type GetStatusOK ServerStatus

func (*GetStatusOK) getStatusRes() {}

// HeadLocalTrustNoContent is response for HeadLocalTrust operation.
type HeadLocalTrustNoContent struct{}

func (*HeadLocalTrustNoContent) headLocalTrustRes() {}

// HeadLocalTrustNotFound is response for HeadLocalTrust operation.
type HeadLocalTrustNotFound struct{}

func (*HeadLocalTrustNotFound) headLocalTrustRes() {}

// Represents an entry in the trust collection.  Consists of the entry's
// value (`v`) and the index/indices (position) in the collection.
// Ref: #/components/schemas/InlineTrustEntry
type InlineTrustEntry struct {
	// Represents the amount of trust bound to the peer/-s
	// indicated by the entry's index/-ices.
	V     float64 `json:"v"`
	OneOf InlineTrustEntrySum
}

// GetV returns the value of V.
func (s *InlineTrustEntry) GetV() float64 {
	return s.V
}

// GetOneOf returns the value of OneOf.
func (s *InlineTrustEntry) GetOneOf() InlineTrustEntrySum {
	return s.OneOf
}

// SetV sets the value of V.
func (s *InlineTrustEntry) SetV(val float64) {
	s.V = val
}

// SetOneOf sets the value of OneOf.
func (s *InlineTrustEntry) SetOneOf(val InlineTrustEntrySum) {
	s.OneOf = val
}

// InlineTrustEntrySum represents sum type.
type InlineTrustEntrySum struct {
	Type                    InlineTrustEntrySumType // switch on this field
	TrustMatrixEntryIndices TrustMatrixEntryIndices
	TrustVectorEntryIndex   TrustVectorEntryIndex
}

// InlineTrustEntrySumType is oneOf type of InlineTrustEntrySum.
type InlineTrustEntrySumType string

// Possible values for InlineTrustEntrySumType.
const (
	TrustMatrixEntryIndicesInlineTrustEntrySum InlineTrustEntrySumType = "TrustMatrixEntryIndices"
	TrustVectorEntryIndexInlineTrustEntrySum   InlineTrustEntrySumType = "TrustVectorEntryIndex"
)

// IsTrustMatrixEntryIndices reports whether InlineTrustEntrySum is TrustMatrixEntryIndices.
func (s InlineTrustEntrySum) IsTrustMatrixEntryIndices() bool {
	return s.Type == TrustMatrixEntryIndicesInlineTrustEntrySum
}

// IsTrustVectorEntryIndex reports whether InlineTrustEntrySum is TrustVectorEntryIndex.
func (s InlineTrustEntrySum) IsTrustVectorEntryIndex() bool {
	return s.Type == TrustVectorEntryIndexInlineTrustEntrySum
}

// SetTrustMatrixEntryIndices sets InlineTrustEntrySum to TrustMatrixEntryIndices.
func (s *InlineTrustEntrySum) SetTrustMatrixEntryIndices(v TrustMatrixEntryIndices) {
	s.Type = TrustMatrixEntryIndicesInlineTrustEntrySum
	s.TrustMatrixEntryIndices = v
}

// GetTrustMatrixEntryIndices returns TrustMatrixEntryIndices and true boolean if InlineTrustEntrySum is TrustMatrixEntryIndices.
func (s InlineTrustEntrySum) GetTrustMatrixEntryIndices() (v TrustMatrixEntryIndices, ok bool) {
	if !s.IsTrustMatrixEntryIndices() {
		return v, false
	}
	return s.TrustMatrixEntryIndices, true
}

// NewTrustMatrixEntryIndicesInlineTrustEntrySum returns new InlineTrustEntrySum from TrustMatrixEntryIndices.
func NewTrustMatrixEntryIndicesInlineTrustEntrySum(v TrustMatrixEntryIndices) InlineTrustEntrySum {
	var s InlineTrustEntrySum
	s.SetTrustMatrixEntryIndices(v)
	return s
}

// SetTrustVectorEntryIndex sets InlineTrustEntrySum to TrustVectorEntryIndex.
func (s *InlineTrustEntrySum) SetTrustVectorEntryIndex(v TrustVectorEntryIndex) {
	s.Type = TrustVectorEntryIndexInlineTrustEntrySum
	s.TrustVectorEntryIndex = v
}

// GetTrustVectorEntryIndex returns TrustVectorEntryIndex and true boolean if InlineTrustEntrySum is TrustVectorEntryIndex.
func (s InlineTrustEntrySum) GetTrustVectorEntryIndex() (v TrustVectorEntryIndex, ok bool) {
	if !s.IsTrustVectorEntryIndex() {
		return v, false
	}
	return s.TrustVectorEntryIndex, true
}

// NewTrustVectorEntryIndexInlineTrustEntrySum returns new InlineTrustEntrySum from TrustVectorEntryIndex.
func NewTrustVectorEntryIndexInlineTrustEntrySum(v TrustVectorEntryIndex) InlineTrustEntrySum {
	var s InlineTrustEntrySum
	s.SetTrustVectorEntryIndex(v)
	return s
}

// An inline "reference" to a trust collection.
// Instead of pointing (referencing) to an externally stored collection,
// it carries the contents (individual sparse entries) of the collection
// within the reference object itself.
// Ref: #/components/schemas/InlineTrustRef
type InlineTrustRef struct {
	// Denotes the number of peers in the trust collection,
	// i.e. its dimension.
	Size int `json:"size"`
	// Contains the non-zero entries in the trust collection.
	Entries []InlineTrustEntry `json:"entries"`
}

// GetSize returns the value of Size.
func (s *InlineTrustRef) GetSize() int {
	return s.Size
}

// GetEntries returns the value of Entries.
func (s *InlineTrustRef) GetEntries() []InlineTrustEntry {
	return s.Entries
}

// SetSize sets the value of Size.
func (s *InlineTrustRef) SetSize(val int) {
	s.Size = val
}

// SetEntries sets the value of Entries.
func (s *InlineTrustRef) SetEntries(val []InlineTrustEntry) {
	s.Entries = val
}

func (*InlineTrustRef) getLocalTrustRes() {}

// Ref: #/components/schemas/InvalidRequest
type InvalidRequest struct {
	// Describes the error in a human-readable message.
	// It may be empty.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *InvalidRequest) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *InvalidRequest) SetMessage(val string) {
	s.Message = val
}

func (*InvalidRequest) computeRes()          {}
func (*InvalidRequest) computeWithStatsRes() {}
func (*InvalidRequest) deleteLocalTrustRes() {}
func (*InvalidRequest) updateLocalTrustRes() {}

// Refers to a trust collection in a remote object storage service.
// Ref: #/components/schemas/ObjectStorageTrustRef
type ObjectStorageTrustRef struct {
	// URL of the trust collection file.
	// It must refer to a CSV file,
	// with three columns `i`, `j`, and `v` (for trust matrix)
	// or two columns `i` and `v` (for trust vector).
	// Currently the `s3://` URL scheme (AWS S3) is supported.
	URL string `json:"url"`
}

// GetURL returns the value of URL.
func (s *ObjectStorageTrustRef) GetURL() string {
	return s.URL
}

// SetURL sets the value of URL.
func (s *ObjectStorageTrustRef) SetURL(val string) {
	s.URL = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTrustRef returns new OptTrustRef with value set to v.
func NewOptTrustRef(v TrustRef) OptTrustRef {
	return OptTrustRef{
		Value: v,
		Set:   true,
	}
}

// OptTrustRef is optional TrustRef.
type OptTrustRef struct {
	Value TrustRef
	Set   bool
}

// IsSet returns true if OptTrustRef was set.
func (o OptTrustRef) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTrustRef) Reset() {
	var v TrustRef
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTrustRef) SetTo(v TrustRef) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTrustRef) Get() (v TrustRef, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTrustRef) Or(d TrustRef) TrustRef {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/ServerStatus
type ServerStatus struct {
	// The server status message.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *ServerStatus) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *ServerStatus) SetMessage(val string) {
	s.Message = val
}

type StoredTrustId string

// A trust collection stored on the server and identified with a string.
// Ref: #/components/schemas/StoredTrustRef
type StoredTrustRef struct {
	ID StoredTrustId `json:"id"`
}

// GetID returns the value of ID.
func (s *StoredTrustRef) GetID() StoredTrustId {
	return s.ID
}

// SetID sets the value of ID.
func (s *StoredTrustRef) SetID(val StoredTrustId) {
	s.ID = val
}

// Represents the location (indices) of a trust matrix entry.
// Ref: #/components/schemas/TrustMatrixEntryIndices
type TrustMatrixEntryIndices struct {
	// The row index.
	I int `json:"i"`
	// The column index.
	J int `json:"j"`
}

// GetI returns the value of I.
func (s *TrustMatrixEntryIndices) GetI() int {
	return s.I
}

// GetJ returns the value of J.
func (s *TrustMatrixEntryIndices) GetJ() int {
	return s.J
}

// SetI sets the value of I.
func (s *TrustMatrixEntryIndices) SetI(val int) {
	s.I = val
}

// SetJ sets the value of J.
func (s *TrustMatrixEntryIndices) SetJ(val int) {
	s.J = val
}

// A trust collection (matrix/vector).
// Individual entry values in the collection represent trust levels;
// the index/-ices – that is, the coordinate/-s – of an entry
// indicate the peer/-s to which the trust level (value) is bound.
// The actual nature of this binding between peer/-s and the trust level
// is up to the context.
// For example, in a global trust (vector) the entry index denotes
// the peer to which the trust value is assigned,
// (the network trusts this peer by the trust level amount;
// the peer is the "trustee"),
// while in a column vector of a local trust matrix the entry index denotes
// the peer from which the inbound trust is originating
// (the peer is the "truster").
// Ref: #/components/schemas/TrustRef
type TrustRef struct {
	Scheme TrustRefScheme `json:"scheme"`
	OneOf  TrustRefSum
}

// GetScheme returns the value of Scheme.
func (s *TrustRef) GetScheme() TrustRefScheme {
	return s.Scheme
}

// GetOneOf returns the value of OneOf.
func (s *TrustRef) GetOneOf() TrustRefSum {
	return s.OneOf
}

// SetScheme sets the value of Scheme.
func (s *TrustRef) SetScheme(val TrustRefScheme) {
	s.Scheme = val
}

// SetOneOf sets the value of OneOf.
func (s *TrustRef) SetOneOf(val TrustRefSum) {
	s.OneOf = val
}

func (*TrustRef) computeRes() {}

// Trust reference scheme, akin to URI scheme.
// Ref: #/components/schemas/TrustRefScheme
type TrustRefScheme string

const (
	TrustRefSchemeInline        TrustRefScheme = "inline"
	TrustRefSchemeStored        TrustRefScheme = "stored"
	TrustRefSchemeObjectstorage TrustRefScheme = "objectstorage"
)

// AllValues returns all TrustRefScheme values.
func (TrustRefScheme) AllValues() []TrustRefScheme {
	return []TrustRefScheme{
		TrustRefSchemeInline,
		TrustRefSchemeStored,
		TrustRefSchemeObjectstorage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TrustRefScheme) MarshalText() ([]byte, error) {
	switch s {
	case TrustRefSchemeInline:
		return []byte(s), nil
	case TrustRefSchemeStored:
		return []byte(s), nil
	case TrustRefSchemeObjectstorage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TrustRefScheme) UnmarshalText(data []byte) error {
	switch TrustRefScheme(data) {
	case TrustRefSchemeInline:
		*s = TrustRefSchemeInline
		return nil
	case TrustRefSchemeStored:
		*s = TrustRefSchemeStored
		return nil
	case TrustRefSchemeObjectstorage:
		*s = TrustRefSchemeObjectstorage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// TrustRefSum represents sum type.
type TrustRefSum struct {
	Type                  TrustRefSumType // switch on this field
	InlineTrustRef        InlineTrustRef
	StoredTrustRef        StoredTrustRef
	ObjectStorageTrustRef ObjectStorageTrustRef
}

// TrustRefSumType is oneOf type of TrustRefSum.
type TrustRefSumType string

// Possible values for TrustRefSumType.
const (
	InlineTrustRefTrustRefSum        TrustRefSumType = "InlineTrustRef"
	StoredTrustRefTrustRefSum        TrustRefSumType = "StoredTrustRef"
	ObjectStorageTrustRefTrustRefSum TrustRefSumType = "ObjectStorageTrustRef"
)

// IsInlineTrustRef reports whether TrustRefSum is InlineTrustRef.
func (s TrustRefSum) IsInlineTrustRef() bool { return s.Type == InlineTrustRefTrustRefSum }

// IsStoredTrustRef reports whether TrustRefSum is StoredTrustRef.
func (s TrustRefSum) IsStoredTrustRef() bool { return s.Type == StoredTrustRefTrustRefSum }

// IsObjectStorageTrustRef reports whether TrustRefSum is ObjectStorageTrustRef.
func (s TrustRefSum) IsObjectStorageTrustRef() bool {
	return s.Type == ObjectStorageTrustRefTrustRefSum
}

// SetInlineTrustRef sets TrustRefSum to InlineTrustRef.
func (s *TrustRefSum) SetInlineTrustRef(v InlineTrustRef) {
	s.Type = InlineTrustRefTrustRefSum
	s.InlineTrustRef = v
}

// GetInlineTrustRef returns InlineTrustRef and true boolean if TrustRefSum is InlineTrustRef.
func (s TrustRefSum) GetInlineTrustRef() (v InlineTrustRef, ok bool) {
	if !s.IsInlineTrustRef() {
		return v, false
	}
	return s.InlineTrustRef, true
}

// NewInlineTrustRefTrustRefSum returns new TrustRefSum from InlineTrustRef.
func NewInlineTrustRefTrustRefSum(v InlineTrustRef) TrustRefSum {
	var s TrustRefSum
	s.SetInlineTrustRef(v)
	return s
}

// SetStoredTrustRef sets TrustRefSum to StoredTrustRef.
func (s *TrustRefSum) SetStoredTrustRef(v StoredTrustRef) {
	s.Type = StoredTrustRefTrustRefSum
	s.StoredTrustRef = v
}

// GetStoredTrustRef returns StoredTrustRef and true boolean if TrustRefSum is StoredTrustRef.
func (s TrustRefSum) GetStoredTrustRef() (v StoredTrustRef, ok bool) {
	if !s.IsStoredTrustRef() {
		return v, false
	}
	return s.StoredTrustRef, true
}

// NewStoredTrustRefTrustRefSum returns new TrustRefSum from StoredTrustRef.
func NewStoredTrustRefTrustRefSum(v StoredTrustRef) TrustRefSum {
	var s TrustRefSum
	s.SetStoredTrustRef(v)
	return s
}

// SetObjectStorageTrustRef sets TrustRefSum to ObjectStorageTrustRef.
func (s *TrustRefSum) SetObjectStorageTrustRef(v ObjectStorageTrustRef) {
	s.Type = ObjectStorageTrustRefTrustRefSum
	s.ObjectStorageTrustRef = v
}

// GetObjectStorageTrustRef returns ObjectStorageTrustRef and true boolean if TrustRefSum is ObjectStorageTrustRef.
func (s TrustRefSum) GetObjectStorageTrustRef() (v ObjectStorageTrustRef, ok bool) {
	if !s.IsObjectStorageTrustRef() {
		return v, false
	}
	return s.ObjectStorageTrustRef, true
}

// NewObjectStorageTrustRefTrustRefSum returns new TrustRefSum from ObjectStorageTrustRef.
func NewObjectStorageTrustRefTrustRefSum(v ObjectStorageTrustRef) TrustRefSum {
	var s TrustRefSum
	s.SetObjectStorageTrustRef(v)
	return s
}

// Represents the location (index) of a trust vector entry.
// Ref: #/components/schemas/TrustVectorEntryIndex
type TrustVectorEntryIndex struct {
	// The index.
	I int `json:"i"`
}

// GetI returns the value of I.
func (s *TrustVectorEntryIndex) GetI() int {
	return s.I
}

// SetI sets the value of I.
func (s *TrustVectorEntryIndex) SetI(val int) {
	s.I = val
}

// UpdateLocalTrustCreated is response for UpdateLocalTrust operation.
type UpdateLocalTrustCreated struct{}

func (*UpdateLocalTrustCreated) updateLocalTrustRes() {}

// UpdateLocalTrustOK is response for UpdateLocalTrust operation.
type UpdateLocalTrustOK struct{}

func (*UpdateLocalTrustOK) updateLocalTrustRes() {}
